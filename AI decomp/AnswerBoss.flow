
// 
// FlowScript decompiled using Atlus Script Tools by TGE (2017-2021)
// In the unfortunate case of any bugs, please report them back to me.
// 


// 
// Imports
// 

import( "AnswerBoss.msg" );

// 
// Procedure declarations
// 

// Procedure Index: 0
void AI_EVENT_1A0_BTLSTART()
{
}


// Procedure Index: 1
void AI_EVENT_1A0_ACTSTART()
{
}


// Procedure Index: 2
void AI_EVENT_1A0_ACTEND()
{
}


// Procedure Index: 3
void AI_EVENT_1A1_BTLSTART()
{
}


// Procedure Index: 4
void AI_EVENT_1A1_ACTSTART()
{
}


// Procedure Index: 5
void AI_EVENT_1A1_ACTEND()
{
}


// Procedure Index: 6
void AI_EVENT_1A2_BTLSTART()
{
}


// Procedure Index: 7
void AI_EVENT_1A2_ACTSTART()
{
}


// Procedure Index: 8
void AI_EVENT_1A2_ACTEND()
{
}


// Procedure Index: 9
void AI_EVENT_1A3_BTLSTART()
{
}


// Procedure Index: 10
void AI_EVENT_1A3_ACTSTART()
{
}


// Procedure Index: 11
void AI_EVENT_1A3_ACTEND()
{
}


// Procedure Index: 12
void AI_EVENT_1A4_BTLSTART()
{
}


// Procedure Index: 13
void AI_EVENT_1A4_ACTSTART()
{
}


// Procedure Index: 14
void AI_EVENT_1A4_ACTEND()
{
}


// Procedure Index: 15
void AI_EVENT_1A5_BTLSTART()
{
}


// Procedure Index: 16
void AI_EVENT_1A5_ACTSTART()
{
}


// Procedure Index: 17
void AI_EVENT_1A5_ACTEND()
{
}


// Procedure Index: 18
void AI_EVENT_1A6_BTLSTART()
{
}


// Procedure Index: 19
void AI_EVENT_1A6_ACTSTART()
{
}


// Procedure Index: 20
void AI_EVENT_1A6_ACTEND()
{
}


// Procedure Index: 21
void AI_EVENT_1A7_BTLSTART()
{
}


// Procedure Index: 22
void AI_EVENT_1A7_ACTSTART()
{
}


// Procedure Index: 23
void AI_EVENT_1A7_ACTEND()
{
}


// Procedure Index: 24
void AI_EVENT_1A8_BTLSTART()
{
}


// Procedure Index: 25
void AI_EVENT_1A8_ACTSTART()
{
}


// Procedure Index: 26
void AI_EVENT_1A8_ACTEND()
{
}


// Procedure Index: 27
void AI_JIBAKU()
{
}


// Procedure Index: 28
void AI_EVENT_1A9_BTLSTART()
{
}


// Procedure Index: 29
void AI_EVENT_1A9_ACTSTART()
{
}


// Procedure Index: 30
void AI_EVENT_1A9_ACTEND()
{
}


// Procedure Index: 31
void AI_EVENT_1AA_BTLSTART()
{
}


// Procedure Index: 32
void AI_EVENT_1AA_ACTSTART()
{
}


// Procedure Index: 33
void AI_EVENT_1AA_ACTEND()
{
}


// Procedure Index: 34
void AI_EVENT_1AB_BTLSTART()
{
}


// Procedure Index: 35
void AI_EVENT_1AB_ACTSTART()
{
}


// Procedure Index: 36
void AI_EVENT_1AB_ACTEND()
{
}


// Procedure Index: 37
void AI_EVENT_1AC_BTLSTART()
{
}


// Procedure Index: 38
void AI_EVENT_1AC_ACTSTART()
{
}


// Procedure Index: 39
void AI_EVENT_1AC_ACTEND()
{
}


// Procedure Index: 40
void NYX_TAROT_CHANGE()
{
}


// Procedure Index: 41
void NYX_YAMIYO()
{
}


// Procedure Index: 42
void NYX_YORUNO()
{
}


// Procedure Index: 43
void AI_EVENT_1AD_BTLSTART()
{
}


// Procedure Index: 44
void AI_EVENT_1AD_ACTSTART()
{
}


// Procedure Index: 45
void AI_EVENT_1AD_ACTEND()
{
}


// Procedure Index: 46
void AI_EVENT_1AE_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    OPEN_MSG_WIN();
    FUNCTION_01C1( 0 );
    FUNCTION_01B0();
    EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 0 );
    MSG( MSG_0864 );
    MSG( MSG_0865 );
    FUNCTION_00B7( 0 );
    EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 3 );
    MSG( MSG_0866 );
    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 47
void AI_EVENT_1AE_ACTSTART()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (496) = 5616
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (496) = 5616
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    
    if ( FUNCTION_01BD( 1, 294 ) == 1 )
    {
        
        if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) ) == 0 )
        {
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
            FUNCTION_01B8();
            FUNCTION_01BA();
            OPEN_MSG_WIN();
            FUNCTION_01C1( 0 );
            FUNCTION_01B3( -47.20f, 101.30f, -944.50f, -54.00f, 93.10f, -845.10f );
            FUNCTION_01B4( 2.90f, 297.70f, -1036.20f, -7.50f, 268.00f, -941.30f );
            FUNCTION_01B5( 112 );
            MSG( MSG_0867 );
            FUNCTION_01B3( 399.30f, 400.40f, 63.40f, 348.30f, 346.40f, -3.60f );
            FUNCTION_01B4( 54.30f, 357.40f, 229.20f, 57.50f, 305.40f, 143.80f );
            FUNCTION_01B5( 88 );
            MSG( MSG_0868 );
            FUNCTION_01B3( 31.00f, 408.90f, 456.00f, 38.80f, 367.10f, 365.40f );
            FUNCTION_01B4( -3.40f, 99.80f, 853.80f, 5.20f, 96.20f, 754.30f );
            FUNCTION_01B5( 103 );
            MSG( MSG_0869 );
            CLOSE_MSG_WIN();
            FUNCTION_01B7();
            FUNCTION_01B9();
        }
        else if ( ( FUNCTION_0036( 25 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 496 ) ) == 0 ) )
        {
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 496 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
            FUNCTION_01B8();
            FUNCTION_01BA();
            OPEN_MSG_WIN();
            FUNCTION_01C1( 0 );
            FUNCTION_01B3( 124.90f, 151.60f, -896.40f, 94.40f, 134.30f, -802.80f );
            FUNCTION_01B4( -18.80f, 63.30f, -871.50f, -21.10f, 59.00f, -771.60f );
            FUNCTION_01B5( 105 );
            MSG( MSG_0874 );
            CLOSE_MSG_WIN();
            FUNCTION_01B7();
            FUNCTION_01B9();
        }
        else if ( ( FUNCTION_0036( 50 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) ) == 0 ) )
        {
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
            FUNCTION_01B8();
            FUNCTION_01BA();
            OPEN_MSG_WIN();
            FUNCTION_01C1( 0 );
            FUNCTION_01B3( -249.30f, 315.10f, -772.50f, -219.90f, 272.50f, -687.00f );
            FUNCTION_01B4( 9.20f, 112.80f, -847.80f, -7.70f, 98.20f, -750.30f );
            FUNCTION_01B5( 79 );
            MSG( MSG_0872 );
            FUNCTION_01B3( 3.60f, 83.90f, 626.90f, 10.40f, 81.30f, 527.20f );
            FUNCTION_01B4( 12.30f, 196.40f, 247.20f, 20.60f, 169.20f, 151.40f );
            FUNCTION_01B5( 160 );
            MSG( MSG_0873 );
            CLOSE_MSG_WIN();
            FUNCTION_01B7();
            FUNCTION_01B9();
        }
        else if ( ( FUNCTION_0036( 75 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) ) == 0 ) )
        {
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
            FUNCTION_01B8();
            FUNCTION_01BA();
            OPEN_MSG_WIN();
            FUNCTION_01C1( 0 );
            FUNCTION_01B3( 371.70f, 345.00f, 215.00f, 332.40f, 304.00f, 132.70f );
            FUNCTION_01B4( 95.70f, 313.50f, 296.30f, 97.50f, 272.50f, 205.10f );
            FUNCTION_01B5( 136 );
            MSG( MSG_0870 );
            FUNCTION_01B3( -337.00f, 370.30f, -912.30f, -306.00f, 329.80f, -826.40f );
            FUNCTION_01B4( -20.30f, 204.30f, -1121.00f, -32.00f, 191.50f, -1022.50f );
            FUNCTION_01B5( 132 );
            MSG( MSG_0871 );
            CLOSE_MSG_WIN();
            FUNCTION_01B7();
            FUNCTION_01B9();
        }

    }

}


// Procedure Index: 48
void AI_EVENT_1AE_ACTEND()
{
    FUNCTION_01AD();
}


// Procedure Index: 49
void AI_EVENT_1EA_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1EA_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1EA_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 50
void AI_EVENT_1CE_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1CE_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1CE_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 51
void AI_EVENT_1CF_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1CF_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1CF_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 52
void AI_EVENT_1D0_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1D0_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 0 );
        MSG( MSG_1D0_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 53
void AI_EVENT_1D1_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1D1_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1D1_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 54
void AI_EVENT_1D6_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1D6_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1D6_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 55
void AI_EVENT_1D7_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1D7_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1D7_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 56
void AI_EVENT_1D8_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1D8_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1D8_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 57
void AI_EVENT_1D9_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1D9_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1D9_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 58
void AI_EVENT_1DA_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1DA_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1DA_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 59
void AI_EVENT_1DB_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1DB_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1DB_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 60
void AI_EVENT_1DC_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1DC_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1DC_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 61
void AI_EVENT_1DD_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1DD_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1DD_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 62
void AI_EVENT_1DE_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1DE_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1DE_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 63
void AI_EVENT_1DF_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1DF_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1DF_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 64
void AI_EVENT_1E0_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1E0_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1E0_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 65
void AI_EVENT_1E1_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1E1_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1E1_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 66
void AI_EVENT_1E2_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1E2_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1E2_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 67
void AI_EVENT_1E3_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1E3_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1E3_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 68
void AI_EVENT_1E4_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1E4_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1E4_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 69
void AI_EVENT_1E5_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1E5_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1E5_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 70
void AI_EVENT_1E6_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1E6_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1E6_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 71
void AI_EVENT_1E7_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1E7_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1E7_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 72
void AI_EVENT_1E8_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1E8_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1E8_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 73
void AI_EVENT_1E9_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    FUNCTION_01B0();
    OPEN_MSG_WIN();
    // bit id (0) + (321) = 321
    
    if ( BIT_CHK( ( 0 + 321 ) ) )
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 4, 4, 2, 2 );
        MSG( MSG_1E9_M );
    }
    else 
    {
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_1E9_F );
    }

    FUNCTION_00B7( 0 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 74
void AI_EVENT_1AF_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    OPEN_MSG_WIN();
    FUNCTION_01C1( 0 );
    FUNCTION_01B3( 84.80f, 224.40f, 132.90f, 80.30f, 185.90f, 40.70f );
    FUNCTION_01B4( 208.00f, 186.30f, 129.40f, 179.20f, 157.30f, 38.10f );
    FUNCTION_01B5( 50 );
    MSG( MSG_0875 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 75
void AI_EVENT_1AF_ACTSTART()
{
    FUNCTION_01AD();
}


// Procedure Index: 76
void AI_EVENT_1AF_ACTEND()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (496) = 5616
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (496) = 5616
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    
    if ( ( FUNCTION_0158( 233, 25 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 496 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 496 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 145.30f, 197.60f, 377.40f, 139.10f, 174.10f, 280.40f );
        FUNCTION_01B4( 190.90f, 132.20f, 633.60f, 167.90f, 112.60f, 538.30f );
        FUNCTION_01B5( 69 );
        MSG( MSG_0878 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( FUNCTION_0158( 233, 50 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -94.10f, 195.80f, 95.90f, -64.80f, 162.40f, 6.30f );
        FUNCTION_01B4( -182.50f, 152.10f, 72.80f, -129.30f, 130.50f, -9.00f );
        FUNCTION_01B5( 50 );
        MSG( MSG_0877 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( FUNCTION_0158( 233, 75 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 173.20f, 268.80f, -676.40f, 139.30f, 229.00f, -591.10f );
        FUNCTION_01B4( 125.30f, 98.40f, -723.50f, 92.80f, 89.10f, -629.40f );
        FUNCTION_01B5( 89 );
        MSG( MSG_0876 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }

}


// Procedure Index: 77
void AI_EVENT_1B4_BTLSTART()
{
    FUNCTION_01AD();
}


// Procedure Index: 78
void AI_EVENT_1B4_ACTSTART()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (500) = 5620
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (500) = 5620
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (505) = 5625
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (505) = 5625
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (506) = 5626
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    
    if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 500 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 500 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B0();
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 3 );
        MSG( MSG_0916 );
        MSG( MSG_0917 );
        FUNCTION_00B7( 0 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 505 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 505 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B0();
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_0926 );
        MSG( MSG_0927 );
        FUNCTION_00B7( 0 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 506 ) ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B0();
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_0918 );
        MSG( MSG_0919 );
        FUNCTION_00B7( 0 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (503) = 5623
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (503) = 5623
    
    if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 503 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 503 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B0();
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 0 );
        MSG( MSG_0920 );
        FUNCTION_00B7( 0 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (511) = 5631
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (504) = 5624
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (504) = 5624
    
    if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 511 ) ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 504 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 504 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B0();
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 0 );
        MSG( MSG_0922 );
        MSG( MSG_0923 );
        FUNCTION_00B7( 0 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }

}


// Procedure Index: 79
void AI_EVENT_1B4_ACTEND()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (496) = 5616
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (496) = 5616
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (453) = 5573
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    
    if ( ( FUNCTION_0176() == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 496 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 496 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B0();
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 0 );
        MSG( MSG_0924 );
        FUNCTION_00B7( 0 );
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 2 );
        MSG( MSG_0925 );
        FUNCTION_00B7( 0 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( FUNCTION_0176() == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 453 ) ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B0();
        EVT_CUTIN_FUNCTION_00B6( 0, 0, 0, 6, 4, 2, 0 );
        MSG( MSG_0914 );
        MSG( MSG_0915 );
        FUNCTION_00B7( 0 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }

}


// Procedure Index: 80
void AI_EVENT_1B0_BTLSTART()
{
    FUNCTION_01B6( 492, 0 );
}


// Procedure Index: 81
void AI_EVENT_1B0_ACTSTART()
{
    int var0;
    var0 = FUNCTION_0192( 0 );
    
    if ( FUNCTION_01BD( 0, 1 ) == 1 )
    {
        var0 = ( var0 + 1 );
        FUNCTION_0193( 10, var0 );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (496) = 5616
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (496) = 5616
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (500) = 5620
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (500) = 5620
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    
    if ( ( ( FUNCTION_01EC() == 225 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 496 ) ) == 0 ) ) && ( var0 > 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 496 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 134.80f, 383.90f, -901.60f, 101.10f, 343.80f, -816.50f );
        FUNCTION_01B4( -17.10f, 58.40f, -791.30f, -25.30f, 62.40f, -691.70f );
        FUNCTION_01B5( 170 );
        MSG( MSG_0881 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( FUNCTION_01EC() == 224 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) ) == 0 ) ) && ( AI_CHK_UNIT_STATUS( PartyMember.Yukari, StatusEffects.Unconscious ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 134.80f, 383.90f, -901.60f, 101.10f, 343.80f, -816.50f );
        FUNCTION_01B4( -17.10f, 58.40f, -791.30f, -25.30f, 62.40f, -691.70f );
        FUNCTION_01B5( 170 );
        MSG( MSG_0880 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( FUNCTION_01EC() == 226 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) ) == 0 ) ) && ( AI_CHK_UNIT_STATUS( PartyMember.Mitsuru, StatusEffects.Unconscious ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 134.80f, 383.90f, -901.60f, 101.10f, 343.80f, -816.50f );
        FUNCTION_01B4( -17.10f, 58.40f, -791.30f, -25.30f, 62.40f, -691.70f );
        FUNCTION_01B5( 170 );
        MSG( MSG_0884 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( FUNCTION_01EC() == 227 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) ) == 0 ) ) && ( AI_CHK_UNIT_STATUS( PartyMember.Junpei, StatusEffects.Unconscious ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 134.80f, 383.90f, -901.60f, 101.10f, 343.80f, -816.50f );
        FUNCTION_01B4( -17.10f, 58.40f, -791.30f, -25.30f, 62.40f, -691.70f );
        FUNCTION_01B5( 170 );
        MSG( MSG_0886 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( FUNCTION_01EC() == 228 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 500 ) ) == 0 ) ) && ( AI_CHK_UNIT_STATUS( PartyMember.Akihiko, StatusEffects.Unconscious ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 500 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 134.80f, 383.90f, -901.60f, 101.10f, 343.80f, -816.50f );
        FUNCTION_01B4( -17.10f, 58.40f, -791.30f, -25.30f, 62.40f, -691.70f );
        FUNCTION_01B5( 170 );
        MSG( MSG_0888 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( FUNCTION_01EC() == 229 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) ) == 0 ) ) && ( AI_CHK_UNIT_STATUS( PartyMember.Ken, StatusEffects.Unconscious ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 134.80f, 383.90f, -901.60f, 101.10f, 343.80f, -816.50f );
        FUNCTION_01B4( -17.10f, 58.40f, -791.30f, -25.30f, 62.40f, -691.70f );
        FUNCTION_01B5( 170 );
        MSG( MSG_0928 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( FUNCTION_01EC() == 230 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) ) == 0 ) ) && ( AI_CHK_UNIT_STATUS( PartyMember.Koromaru, StatusEffects.Unconscious ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 134.80f, 383.90f, -901.60f, 101.10f, 343.80f, -816.50f );
        FUNCTION_01B4( -17.10f, 58.40f, -791.30f, -25.30f, 62.40f, -691.70f );
        FUNCTION_01B5( 170 );
        MSG( MSG_0889 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }

}


// Procedure Index: 82
void AI_EVENT_1B0_ACTEND()
{
    FUNCTION_01AD();
}


// Procedure Index: 83
void AI_EVENT_1B1_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    OPEN_MSG_WIN();
    FUNCTION_01C1( 0 );
    FUNCTION_01B3( 0.00f, 175.20f, 246.10f, -11.60f, 151.40f, 149.70f );
    FUNCTION_01B4( 63.70f, 99.80f, 659.60f, 38.10f, 83.20f, 564.40f );
    FUNCTION_01B5( 83 );
    MSG( MSG_0890 );
    FUNCTION_01B3( 389.40f, 373.00f, -813.90f, 338.70f, 325.30f, -742.10f );
    FUNCTION_01B4( 227.50f, 125.70f, -688.60f, 193.80f, 106.70f, -596.40f );
    FUNCTION_01B5( 67 );
    MSG( MSG_0894 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 84
void AI_EVENT_1B1_ACTSTART()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (503) = 5623
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (503) = 5623
    
    if ( ( FUNCTION_01BD( 0, 1 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 503 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 503 ) );
        FUNCTION_01B6( 494, 0 );
        FUNCTION_01B6( 495, 0 );
    }

}


// Procedure Index: 85
void AI_EVENT_1B1_ACTEND()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (500) = 5620
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (500) = 5620
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    
    if ( ( ( ( FUNCTION_0158( 235, 25 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 235, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 235, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 12.90f, 329.90f, 105.10f, -5.40f, 269.70f, 27.40f );
        FUNCTION_01B4( 27.80f, 58.40f, 680.70f, -0.10f, 57.30f, 584.70f );
        FUNCTION_01B5( 161 );
        MSG( MSG_0893 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 235, 50 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 235, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 235, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -425.70f, 415.90f, -860.40f, -401.40f, 368.60f, -775.70f );
        FUNCTION_01B4( -304.80f, 197.10f, -740.20f, -287.40f, 167.60f, -646.30f );
        FUNCTION_01B5( 120 );
        MSG( MSG_0892 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 235, 75 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 235, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 235, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -422.60f, 254.00f, 146.80f, -359.50f, 213.70f, 80.50f );
        FUNCTION_01B4( -306.10f, 94.10f, 111.90f, -254.70f, 79.80f, 27.30f );
        FUNCTION_01B5( 0x40 );
        MSG( MSG_0891 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 236, 25 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 236, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 236, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 500 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 500 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 384.10f, 360.10f, -727.10f, 332.10f, 310.60f, -657.40f );
        FUNCTION_01B4( 265.20f, 214.20f, -713.00f, 228.90f, 179.30f, -626.60f );
        FUNCTION_01B5( 91 );
        MSG( MSG_0897 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 236, 50 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 236, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 236, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 422.60f, 287.40f, 145.20f, 387.40f, 244.10f, 62.20f );
        FUNCTION_01B4( 186.50f, 159.90f, 140.80f, 192.50f, 130.80f, 45.30f );
        FUNCTION_01B5( 111 );
        MSG( MSG_0896 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 236, 75 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 236, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 236, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 140.40f, 201.80f, 155.00f, 158.40f, 164.30f, 64.00f );
        FUNCTION_01B4( 188.00f, 76.30f, 150.00f, 196.50f, 66.30f, 50.80f );
        FUNCTION_01B5( 50 );
        MSG( MSG_0895 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }

}


// Procedure Index: 86
void AI_EVENT_1B2_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    OPEN_MSG_WIN();
    FUNCTION_01C1( 0 );
    FUNCTION_01B3( 396.30f, 276.20f, 81.70f, 359.60f, 227.60f, 2.40f );
    FUNCTION_01B4( 361.80f, 210.60f, 613.10f, 331.10f, 172.60f, 525.90f );
    FUNCTION_01B5( 92 );
    MSG( MSG_0898 );
    FUNCTION_01B3( -425.60f, 242.80f, -664.30f, -382.50f, 202.50f, -583.60f );
    FUNCTION_01B4( -403.80f, 113.10f, -582.80f, -349.10f, 94.00f, -501.30f );
    FUNCTION_01B5( 50 );
    MSG( MSG_0902 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 87
void AI_EVENT_1B2_ACTSTART()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (503) = 5623
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (503) = 5623
    
    if ( ( FUNCTION_01BD( 0, 1 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 503 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 503 ) );
        FUNCTION_01B6( 496, 0 );
        FUNCTION_01B6( 497, 0 );
    }

}


// Procedure Index: 88
void AI_EVENT_1B2_ACTEND()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (500) = 5620
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (500) = 5620
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    
    if ( ( ( ( FUNCTION_0158( 237, 25 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 237, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 237, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 290.60f, 258.10f, -751.30f, 250.10f, 216.60f, -669.80f );
        FUNCTION_01B4( -85.20f, 161.90f, -681.10f, -54.90f, 136.30f, -589.30f );
        FUNCTION_01B5( 144 );
        MSG( MSG_0901 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 237, 50 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 237, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 237, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -108.80f, 281.60f, -744.50f, -75.30f, 243.10f, -658.60f );
        FUNCTION_01B4( 263.40f, 150.50f, -808.10f, 229.40f, 134.40f, -715.40f );
        FUNCTION_01B5( 160 );
        MSG( MSG_0900 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 237, 75 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 237, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 237, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -1.50f, 320.70f, 188.60f, 36.20f, 273.10f, 109.20f );
        FUNCTION_01B4( -109.70f, 103.80f, 21.00f, -37.90f, 88.80f, -47.00f );
        FUNCTION_01B5( 120 );
        MSG( MSG_0899 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 238, 25 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 238, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 238, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 500 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 500 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -318.40f, 145.60f, -498.40f, -274.30f, 118.80f, -412.80f );
        FUNCTION_01B4( -434.20f, 99.60f, -539.80f, -373.20f, 81.10f, -462.80f );
        FUNCTION_01B5( 50 );
        MSG( MSG_0905 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 238, 50 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 238, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 238, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -478.40f, 234.30f, -644.90f, -427.00f, 200.80f, -565.90f );
        FUNCTION_01B4( -371.00f, 89.50f, -650.40f, -333.20f, 80.20f, -558.30f );
        FUNCTION_01B5( 50 );
        MSG( MSG_0904 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 238, 75 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 238, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 238, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -86.20f, 254.70f, 80.20f, -87.00f, 199.40f, -3.10f );
        FUNCTION_01B4( 9.90f, 173.10f, 57.90f, -17.30f, 135.20f, -30.60f );
        FUNCTION_01B5( 50 );
        MSG( MSG_0903 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }

}


// Procedure Index: 89
void AI_EVENT_1B3_BTLSTART()
{
    FUNCTION_01B8();
    FUNCTION_01BA();
    OPEN_MSG_WIN();
    FUNCTION_01C1( 0 );
    FUNCTION_01B3( -205.80f, 341.10f, 353.40f, -181.20f, 295.90f, 267.60f );
    FUNCTION_01B4( -291.40f, 164.50f, 674.90f, -249.90f, 134.60f, 589.00f );
    FUNCTION_01B5( 108 );
    MSG( MSG_0906 );
    FUNCTION_01B3( 115.00f, 317.40f, -804.30f, 107.00f, 272.70f, -715.20f );
    FUNCTION_01B4( 203.60f, 64.00f, -761.60f, 177.00f, 59.70f, -665.30f );
    FUNCTION_01B5( 82 );
    MSG( MSG_0913 );
    CLOSE_MSG_WIN();
    FUNCTION_01B7();
    FUNCTION_01B9();
}


// Procedure Index: 90
void AI_EVENT_1B3_ACTSTART()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (503) = 5623
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (503) = 5623
    
    if ( ( FUNCTION_01BD( 0, 1 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 503 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 503 ) );
        FUNCTION_01B6( 498, 0 );
        FUNCTION_01B6( 499, 0 );
    }

}


// Procedure Index: 91
void AI_EVENT_1B3_ACTEND()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (497) = 5617
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (500) = 5620
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (500) = 5620
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (501) = 5621
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    
    if ( ( ( ( FUNCTION_0158( 239, 25 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 239, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 239, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 497 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -69.70f, 262.00f, -597.60f, -94.10f, 234.30f, -504.70f );
        FUNCTION_01B4( -252.40f, 99.60f, -684.70f, -242.80f, 84.90f, -586.30f );
        FUNCTION_01B5( 83 );
        MSG( MSG_0909 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 239, 50 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 239, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 239, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -477.30f, 383.70f, -725.40f, -440.20f, 331.30f, -648.70f );
        FUNCTION_01B4( -324.90f, 108.10f, -731.20f, -306.10f, 93.00f, -634.20f );
        FUNCTION_01B5( 87 );
        MSG( MSG_0908 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 239, 75 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 239, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 239, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -422.60f, 254.00f, 146.80f, -359.50f, 213.70f, 80.50f );
        FUNCTION_01B4( -306.10f, 94.10f, 111.90f, -254.70f, 79.80f, 27.30f );
        FUNCTION_01B5( 0x40 );
        MSG( MSG_0907 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 240, 25 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 240, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 240, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 500 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 500 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 48.40f, 281.90f, 158.50f, 80.30f, 230.60f, 78.90f );
        FUNCTION_01B4( -194.60f, 90.80f, 707.30f, -157.70f, 80.30f, 615.00f );
        FUNCTION_01B5( 125 );
        MSG( MSG_0912 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 240, 50 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 240, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 240, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 501 ) );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( 382.50f, 258.80f, -800.10f, 327.90f, 222.10f, -724.80f );
        FUNCTION_01B4( 460.10f, 119.40f, -662.30f, 386.10f, 101.60f, -597.50f );
        FUNCTION_01B5( 0x40 );
        MSG( MSG_0911 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }
    else if ( ( ( ( FUNCTION_0158( 240, 75 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( 240, SpecialEffects.Break2 ) == 0 ) ) && ( AI_CHK_PLAYER_EFFECT( 240, SpecialEffects.Break3 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
        FUNCTION_01B8();
        FUNCTION_01BA();
        OPEN_MSG_WIN();
        FUNCTION_01C1( 0 );
        FUNCTION_01B3( -245.90f, 229.00f, -40.40f, -159.40f, 192.60f, -74.80f );
        FUNCTION_01B4( -156.70f, 55.30f, -7.10f, -75.80f, 54.00f, -65.90f );
        FUNCTION_01B5( 67 );
        MSG( MSG_0910 );
        CLOSE_MSG_WIN();
        FUNCTION_01B7();
        FUNCTION_01B9();
    }

}


// Procedure Index: 92
void AI_HighPriestess()
{
}


// Procedure Index: 93
void AI_P_TUKIBITOA()
{
    int var1;
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (458) = 5578
    
    if ( AI_CHK_ALLY_EFFECT( SpecialEffects.DefenseBuff ) == 0 )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 458 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (458) = 5578
    
    if ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 1 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 458 ) );
    }

    var1 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (458) = 5578
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (458) = 5578
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 458 ) ) == 0 )
    {
        
        if ( var1 < 50 )
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }
        else if ( var1 < ( 50 + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.Pulinpa );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Agi );
            AI_TAR_RND();
            return;
        }

    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 458 ) ) == 1 )
    {
        AI_ACT_WEAPON();
        AI_TAR_STATUS( StatusEffects.Panic );
        return;
    }

    FUNCTION_0075();
}


// Procedure Index: 94
void AI_P_TUKIBITOB()
{
    int var2;
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    
    if ( AI_CHK_UNIT_HP_PERCENT( BattleUnit.Priestess, 99 ) == 1 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
    }
    else if ( AI_CHK_UNIT_HP_PERCENT( BattleUnit.Priestess, 99 ) == 0 )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    
    if ( AI_SELF_HP_PERCENT( 99 ) == 1 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) );
    }
    else if ( AI_SELF_HP_PERCENT( 99 ) == 0 )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) );
    }

    var2 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    
    if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 0 ) )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }
    else if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 0 ) )
    {
        
        if ( var2 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.Dia );
            AI_TAR_UNIT( BattleUnit.Priestess );
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 1 ) )
    {
        AI_ACT_SKILL( BattleSkill.Dia );
        AI_TAR_UNIT( BattleUnit.MutteringTiara3 );
        return;
    }
    else if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 1 ) )
    {
        AI_ACT_SKILL( BattleSkill.Dia );
        AI_TAR_UNIT( BattleUnit.MutteringTiara3 );
        return;
    }
    else 
    {
        FUNCTION_0090();
        AI_TAR_SELF();
        return;
    }

    FUNCTION_0075();
}


// Procedure Index: 95
void AI_RARE()
{
    int var3;
    int var4;
    int var5;
    int var6;
    int var7;
    int var8;
    int var9;
    var3 = AI_RND( 100 );
    var4 = FUNCTION_0192( 0 );
    var4 = ( var4 + 10 );
    FUNCTION_0193( 0, var4 );
    var5 = AI_RND( 4 );
    var6 = AI_RND( 100 );
    var7 = FUNCTION_0192( 1 );
    var8 = AI_RND( 100 );
    var9 = FUNCTION_0192( 2 );
    AI_SELF_HP_PERCENT( var3 );
    AI_SELF_HP_PERCENT( var4 );
    // bit id ((((0) + (1024)) + (2048)) + (1024)) + (5) = 4101
    // bit id (0) + (341) = 341
    // bit id (0) + (338) = 338
    // bit id (0) + (337) = 337
    // bit id (0) + (342) = 342
    // bit id (0) + (344) = 344
    // bit id (0) + (343) = 343
    // bit id ((0) + (1024)) + (1569) = 2593
    // bit id (0) + (337) = 337
    // bit id (0) + (342) = 342
    // bit id (0) + (344) = 344
    // bit id (0) + (343) = 343
    // bit id (0) + (344) = 344
    // bit id (0) + (342) = 342
    // bit id (0) + (343) = 343
    // bit id (0) + (342) = 342
    // bit id (0) + (343) = 343
    // bit id (0) + (343) = 343
    // bit id ((0) + (1024)) + (1569) = 2593
    
    if ( ( var7 < 3 ) && ( BIT_CHK( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 5 ) ) == 0 ) )
    {
        
        if ( ( ( ( ( ( ( BIT_CHK( ( 0 + 341 ) ) == 1 ) && ( BIT_CHK( ( 0 + 338 ) ) == 1 ) ) && ( BIT_CHK( ( 0 + 337 ) ) == 0 ) ) && ( BIT_CHK( ( 0 + 342 ) ) == 0 ) ) && ( BIT_CHK( ( 0 + 344 ) ) == 0 ) ) && ( BIT_CHK( ( 0 + 343 ) ) == 0 ) ) && ( BIT_CHK( ( ( 0 + 0x0400 ) + 1569 ) ) == 1 ) )
        {
            
            if ( var6 < 25 )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 18 ), 85 );
            }
            else if ( var6 < ( 25 + 25 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 69 ), 85 );
            }
            else if ( var6 < ( ( 25 + 25 ) + 25 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 72 ), 85 );
            }
            else 
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 70 ), 85 );
            }

        }
        else if ( ( ( ( BIT_CHK( ( 0 + 337 ) ) == 1 ) && ( BIT_CHK( ( 0 + 342 ) ) == 0 ) ) && ( BIT_CHK( ( 0 + 344 ) ) == 0 ) ) && ( BIT_CHK( ( 0 + 343 ) ) == 0 ) )
        {
            
            if ( var6 < 20 )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 18 ), 85 );
            }
            else if ( var6 < ( 20 + 20 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 69 ), 85 );
            }
            else if ( var6 < ( ( 20 + 20 ) + 20 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 72 ), 85 );
            }
            else if ( var6 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 70 ), 85 );
            }
            else 
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var4 );
                FUNCTION_01ED( ( 4000 + 75 ), 85 );
            }

        }
        else if ( ( ( BIT_CHK( ( 0 + 344 ) ) == 1 ) && ( BIT_CHK( ( 0 + 342 ) ) == 0 ) ) && ( BIT_CHK( ( 0 + 343 ) ) == 0 ) )
        {
            
            if ( var6 < 17 )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 18 ), 85 );
            }
            else if ( var6 < ( 17 + 17 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 69 ), 85 );
            }
            else if ( var6 < ( ( 17 + 17 ) + 0x10 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 72 ), 85 );
            }
            else if ( var6 < ( ( ( 17 + 17 ) + 0x10 ) + 17 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 70 ), 85 );
            }
            else if ( var6 < ( ( ( ( 17 + 17 ) + 0x10 ) + 17 ) + 0x10 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 75 ), 85 );
            }
            else 
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var4 );
                FUNCTION_01ED( ( 4000 + 74 ), 85 );
            }

        }
        else if ( ( BIT_CHK( ( 0 + 342 ) ) == 1 ) && ( BIT_CHK( ( 0 + 343 ) ) == 0 ) )
        {
            
            if ( var6 < 14 )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 18 ), 85 );
            }
            else if ( var6 < ( 14 + 14 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 69 ), 85 );
            }
            else if ( var6 < ( ( 14 + 14 ) + 15 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 72 ), 85 );
            }
            else if ( var6 < ( ( ( 14 + 14 ) + 15 ) + 14 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 70 ), 85 );
            }
            else if ( var6 < ( ( ( ( 14 + 14 ) + 15 ) + 14 ) + 14 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 75 ), 85 );
            }
            else if ( var6 < ( ( ( ( ( 14 + 14 ) + 15 ) + 14 ) + 14 ) + 15 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 74 ), 85 );
            }
            else 
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 71 ), 85 );
            }

        }
        else if ( BIT_CHK( ( 0 + 343 ) ) == 1 )
        {
            
            if ( var6 < 12 )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 18 ), 85 );
            }
            else if ( var6 < ( 12 + 13 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 69 ), 85 );
            }
            else if ( var6 < ( ( 12 + 13 ) + 12 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 72 ), 85 );
            }
            else if ( var6 < ( ( ( 12 + 13 ) + 12 ) + 13 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 70 ), 85 );
            }
            else if ( var6 < ( ( ( ( 12 + 13 ) + 12 ) + 13 ) + 12 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 75 ), 85 );
            }
            else if ( var6 < ( ( ( ( ( 12 + 13 ) + 12 ) + 13 ) + 12 ) + 13 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 74 ), 85 );
            }
            else if ( var6 < ( ( ( ( ( ( 12 + 13 ) + 12 ) + 13 ) + 12 ) + 13 ) + 12 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 71 ), 85 );
            }
            else 
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 73 ), 85 );
            }

        }
        else if ( BIT_CHK( ( ( 0 + 0x0400 ) + 1569 ) ) == 1 )
        {
            
            if ( var6 < 34 )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 18 ), 85 );
            }
            else if ( var6 < ( 34 + 33 ) )
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 69 ), 85 );
            }
            else 
            {
                var7 = ( var7 + 1 );
                FUNCTION_0193( 1, var7 );
                FUNCTION_01ED( ( 4000 + 72 ), 85 );
            }

        }

    }

    
    if ( var5 == 1 )
    {
        AI_AFFINITY_SWITCH( 226 );
    }
    else if ( var5 == 2 )
    {
        AI_AFFINITY_SWITCH( 227 );
    }
    else 
    {
        AI_AFFINITY_SWITCH( 228 );
    }

    
    if ( var4 > var3 )
    {
        AI_ASK_TO_LEAVE();
        return;
    }
    else 
    {
        AI_WAIT_CUSTOM( 221 );
        return;
    }

}


// Procedure Index: 96
void AI_TheEmpress()
{
}


// Procedure Index: 97
void AI_TheEmperor()
{
}


// Procedure Index: 98
void AI_TheHierophant()
{
}


// Procedure Index: 99
void AI_TheLovers()
{
}


// Procedure Index: 100
void AI_TheChariot()
{
}


// Procedure Index: 101
void AI_TheJustice()
{
}


// Procedure Index: 102
void AI_JusticeTheChariot()
{
}


// Procedure Index: 103
void AI_TheHermit()
{
}


// Procedure Index: 104
void AI_TheHermitJuden()
{
}


// Procedure Index: 105
void AI_WheelofFortune()
{
}


// Procedure Index: 106
void AI_Strength()
{
}


// Procedure Index: 107
void AI_Takaya1()
{
}


// Procedure Index: 108
void AI_Jin1()
{
}


// Procedure Index: 109
void AI_TheHangedMan()
{
}


// Procedure Index: 110
void AI_H_Sekizo_1()
{
    
    if ( AI_RND( 1 ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.Agilao );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Agi );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 111
void AI_H_Sekizo_2()
{
    
    if ( AI_RND( 1 ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.Bufula );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Agi );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 112
void AI_H_Sekizo_3()
{
    
    if ( AI_RND( 1 ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.Zionga );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Agi );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 113
void AI_H_GISEI_1()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    
    if ( AI_CHK_SELF_STATUS( 0x0400 ) == 1 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
    }
    else if ( AI_CHK_SELF_STATUS( 0x0400 ) == 0 )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 0 )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 1 )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
        AI_JIBAKU();
        AI_ACT_SKILL( BattleSkill.Sacrifice );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 114
void AI_H_GISEI_2()
{
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (480) = 5600
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (480) = 5600
    
    if ( AI_CHK_SELF_STATUS( 0x0400 ) == 1 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 480 ) );
    }
    else if ( AI_CHK_SELF_STATUS( 0x0400 ) == 0 )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 480 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (480) = 5600
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (480) = 5600
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (480) = 5600
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 480 ) ) == 0 )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 480 ) ) == 1 )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 480 ) );
        AI_JIBAKU();
        AI_ACT_SKILL( BattleSkill.Sacrifice );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 115
void AI_Chidori()
{
}


// Procedure Index: 116
void AI_Jin2()
{
}


// Procedure Index: 117
void AI_Takaya2()
{
}


// Procedure Index: 118
void AI_Nyx_FOOL()
{
}


// Procedure Index: 119
void AI_Nyx_MAGICIAN()
{
}


// Procedure Index: 120
void AI_Nyx_PRIESTESS()
{
}


// Procedure Index: 121
void AI_Nyx_EMPRESS()
{
}


// Procedure Index: 122
void AI_Nyx_EMPEROR()
{
}


// Procedure Index: 123
void AI_Nyx_HIEROPHANT()
{
}


// Procedure Index: 124
void AI_Nyx_LOVERS()
{
}


// Procedure Index: 125
void AI_Nyx_CHARIOT()
{
}


// Procedure Index: 126
void AI_Nyx_JUSTICE()
{
}


// Procedure Index: 127
void AI_Nyx_HERMIT()
{
}


// Procedure Index: 128
void AI_Nyx_FORTUNE()
{
}


// Procedure Index: 129
void AI_Nyx_STRENGTH()
{
}


// Procedure Index: 130
void AI_Nyx_HANGEDMAN()
{
}


// Procedure Index: 131
void AI_Nyx_DEATH()
{
}


// Procedure Index: 132
void AI_Nyx_DEATH_Dress()
{
}


// Procedure Index: 133
void AI_Nyx_DEATH_Turn()
{
}


// Procedure Index: 134
void AI_Nyx2()
{
}


// Procedure Index: 135
void AI_KILLER()
{
    int var10;
    int var11;
    int var12;
    int var13;
    var10 = AI_RND( 100 );
    var11 = AI_RND( 100 );
    var12 = AI_RND( 100 );
    var13 = AI_RND( 100 );
    
    if ( ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Tetrakarn ) == 1 ) || ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Makarakarn ) == 1 ) )
    {
        AI_ACT_SKILL( BattleSkill.Megidolaon );
        AI_TAR_RND();
        return;
    }

    
    if ( AI_SELF_HP_PERCENT( 50 ) == 0 )
    {
        
        if ( var12 < 25 )
        {
            
            if ( var10 < 15 )
            {
                AI_ACT_SKILL( BattleSkill.Maragidyne );
                AI_TAR_RND();
                return;
            }
            else if ( var10 < ( 15 + 15 ) )
            {
                AI_ACT_SKILL( BattleSkill.Mabufudyne );
                AI_TAR_RND();
                return;
            }
            else if ( var10 < ( ( 15 + 15 ) + 15 ) )
            {
                AI_ACT_SKILL( BattleSkill.Maziodyne );
                AI_TAR_RND();
                return;
            }
            else if ( var10 < ( ( ( 15 + 15 ) + 15 ) + 15 ) )
            {
                AI_ACT_SKILL( BattleSkill.Magarudyne );
                AI_TAR_RND();
                return;
            }
            else if ( var10 < ( ( ( ( 15 + 15 ) + 15 ) + 15 ) + 20 ) )
            {
                AI_ACT_SKILL( BattleSkill.MyriadArrows );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.VileAssault );
                AI_TAR_RND();
                return;
            }

        }
        else if ( ( var12 < ( 25 + 25 ) ) && ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 ) )
        {
            
            if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.FireBreak );
                AI_TAR_REFLECT( Affinity.Fire );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.FireBreak );
                AI_TAR_NULL( Affinity.Fire );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.FireBreak );
                AI_TAR_ABSORB( Affinity.Fire );
                return;
            }
            else if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_REFLECT( Affinity.Ice );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_NULL( Affinity.Ice );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_ABSORB( Affinity.Ice );
                return;
            }
            else if ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_REFLECT( Affinity.Elec );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_NULL( Affinity.Elec );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_ABSORB( Affinity.Elec );
                return;
            }
            else if ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.WindBreak );
                AI_TAR_REFLECT( Affinity.Wind );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Wind ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.WindBreak );
                AI_TAR_NULL( Affinity.Wind );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.WindBreak );
                AI_TAR_ABSORB( Affinity.Wind );
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }

        }
        else if ( var12 < ( ( 25 + 25 ) + 25 ) )
        {
            
            if ( var13 < 50 )
            {
                AI_ACT_SKILL( BattleSkill.Mudoon );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Hamaon );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var12 < ( ( ( 25 + 25 ) + 25 ) + 25 ) )
        {
            
            if ( AI_EN_WEAK( Affinity.Fire ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Agidyne );
                AI_TAR_WEAK( Affinity.Fire );
                return;
            }
            else if ( AI_EN_WEAK( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Bufudyne );
                AI_TAR_WEAK( Affinity.Ice );
                return;
            }
            else if ( AI_EN_WEAK( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Ziodyne );
                AI_TAR_WEAK( Affinity.Elec );
                return;
            }
            else if ( AI_EN_WEAK( Affinity.Wind ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Garudyne );
                AI_TAR_WEAK( Affinity.Wind );
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Megidola );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 50 ) == 1 )
    {
        
        if ( var12 < 25 )
        {
            
            if ( var11 < 15 )
            {
                AI_ACT_SKILL( BattleSkill.Megidolaon );
                AI_TAR_RND();
                return;
            }
            else if ( var11 < ( 15 + 20 ) )
            {
                AI_ACT_SKILL( BattleSkill.MyriadArrows );
                AI_TAR_RND();
                return;
            }
            else if ( var11 < ( ( 15 + 20 ) + 15 ) )
            {
                AI_ACT_SKILL( BattleSkill.VileAssault );
                AI_TAR_RND();
                return;
            }
            else if ( var11 < ( ( ( 15 + 20 ) + 15 ) + 15 ) )
            {
                AI_ACT_SKILL( BattleSkill.Mamudoon );
                AI_TAR_RND();
                return;
            }
            else if ( var11 < ( ( ( ( 15 + 20 ) + 15 ) + 15 ) + 10 ) )
            {
                AI_ACT_SKILL( BattleSkill.LifeDrainBoss );
                AI_TAR_RND();
                return;
            }
            else if ( var11 < ( ( ( ( ( 15 + 20 ) + 15 ) + 15 ) + 10 ) + 10 ) )
            {
                AI_ACT_SKILL( BattleSkill.SpiritDrain );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.VorpalBlade );
                AI_TAR_RND();
                return;
            }

        }
        else if ( ( var12 < ( 25 + 25 ) ) && ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 ) )
        {
            
            if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.FireBreak );
                AI_TAR_REFLECT( Affinity.Fire );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.FireBreak );
                AI_TAR_NULL( Affinity.Fire );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.FireBreak );
                AI_TAR_ABSORB( Affinity.Fire );
                return;
            }
            else if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_REFLECT( Affinity.Ice );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_NULL( Affinity.Ice );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_ABSORB( Affinity.Ice );
                return;
            }
            else if ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_REFLECT( Affinity.Elec );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_NULL( Affinity.Elec );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_ABSORB( Affinity.Elec );
                return;
            }
            else if ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.WindBreak );
                AI_TAR_REFLECT( Affinity.Wind );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Wind ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.WindBreak );
                AI_TAR_NULL( Affinity.Wind );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.WindBreak );
                AI_TAR_ABSORB( Affinity.Wind );
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }

        }
        else if ( var12 < ( ( 25 + 25 ) + 25 ) )
        {
            
            if ( var13 < 50 )
            {
                AI_ACT_SKILL( BattleSkill.Mamudoon );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Mahamaon );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var12 < ( ( ( 25 + 25 ) + 25 ) + 25 ) )
        {
            
            if ( AI_EN_WEAK( Affinity.Fire ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Agidyne );
                AI_TAR_WEAK( Affinity.Fire );
                return;
            }
            else if ( AI_EN_WEAK( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Bufudyne );
                AI_TAR_WEAK( Affinity.Ice );
                return;
            }
            else if ( AI_EN_WEAK( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Ziodyne );
                AI_TAR_WEAK( Affinity.Elec );
                return;
            }
            else if ( AI_EN_WEAK( Affinity.Wind ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Garudyne );
                AI_TAR_WEAK( Affinity.Wind );
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Megidola );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 136
void AI_ELIZABETH()
{
    int var14;
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    
    if ( ( ( AI_EN_HAS_ABSORB( Affinity.Slash ) == 1 ) || ( AI_EN_HAS_REFLECT( Affinity.Slash ) == 1 ) ) || ( AI_EN_HAS_NULL( Affinity.Slash ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
    }
    else if ( ( ( AI_EN_HAS_ABSORB( Affinity.Slash ) == 0 ) && ( AI_EN_HAS_REFLECT( Affinity.Slash ) == 0 ) ) && ( AI_EN_HAS_NULL( Affinity.Slash ) == 0 ) )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    
    if ( ( ( AI_EN_HAS_ABSORB( Affinity.Strike ) == 1 ) || ( AI_EN_HAS_REFLECT( Affinity.Strike ) == 1 ) ) || ( AI_EN_HAS_NULL( Affinity.Strike ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) );
    }
    else if ( ( ( AI_EN_HAS_ABSORB( Affinity.Strike ) == 0 ) && ( AI_EN_HAS_REFLECT( Affinity.Strike ) == 0 ) ) && ( AI_EN_HAS_NULL( Affinity.Strike ) == 0 ) )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    
    if ( ( ( AI_EN_HAS_ABSORB( Affinity.Pierce ) == 1 ) || ( AI_EN_HAS_REFLECT( Affinity.Pierce ) == 1 ) ) || ( AI_EN_HAS_NULL( Affinity.Pierce ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) );
    }
    else if ( ( ( AI_EN_HAS_ABSORB( Affinity.Pierce ) == 0 ) && ( AI_EN_HAS_REFLECT( Affinity.Pierce ) == 0 ) ) && ( AI_EN_HAS_NULL( Affinity.Pierce ) == 0 ) )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (451) = 5571
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (451) = 5571
    
    if ( ( ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 ) || ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 ) ) || ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 451 ) );
    }
    else if ( ( ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 0 ) && ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 0 ) ) && ( AI_EN_HAS_NULL( Affinity.Fire ) == 0 ) )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 451 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (452) = 5572
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (452) = 5572
    
    if ( ( ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 ) || ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 ) ) || ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 452 ) );
    }
    else if ( ( ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 0 ) && ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 0 ) ) && ( AI_EN_HAS_NULL( Affinity.Ice ) == 0 ) )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 452 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (453) = 5573
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (453) = 5573
    
    if ( ( ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 ) || ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 ) ) || ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 453 ) );
    }
    else if ( ( ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 0 ) && ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 0 ) ) && ( AI_EN_HAS_NULL( Affinity.Elec ) == 0 ) )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 453 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (454) = 5574
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (454) = 5574
    
    if ( ( ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 1 ) || ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 1 ) ) || ( AI_EN_HAS_NULL( Affinity.Wind ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 454 ) );
    }
    else if ( ( ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 0 ) && ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 0 ) ) && ( AI_EN_HAS_NULL( Affinity.Wind ) == 0 ) )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 454 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (455) = 5575
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (455) = 5575
    
    if ( ( ( AI_EN_HAS_ABSORB( Affinity.Light ) == 1 ) || ( AI_EN_HAS_REFLECT( Affinity.Light ) == 1 ) ) || ( AI_EN_HAS_NULL( Affinity.Light ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 455 ) );
    }
    else if ( ( ( AI_EN_HAS_ABSORB( Affinity.Light ) == 0 ) && ( AI_EN_HAS_REFLECT( Affinity.Light ) == 0 ) ) && ( AI_EN_HAS_NULL( Affinity.Light ) == 0 ) )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 455 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (456) = 5576
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (456) = 5576
    
    if ( ( ( AI_EN_HAS_ABSORB( Affinity.Dark ) == 1 ) || ( AI_EN_HAS_REFLECT( Affinity.Dark ) == 1 ) ) || ( AI_EN_HAS_NULL( Affinity.Dark ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 456 ) );
    }
    else if ( ( ( AI_EN_HAS_ABSORB( Affinity.Dark ) == 0 ) && ( AI_EN_HAS_REFLECT( Affinity.Dark ) == 0 ) ) && ( AI_EN_HAS_NULL( Affinity.Dark ) == 0 ) )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 456 ) );
    }

    var14 = 0;
    
    if ( AI_CHK_TURN() == 1 )
    {
        var14 = FUNCTION_0192( 1 );
        var14 = ( var14 + 1 );
        FUNCTION_0193( 1, var14 );
    }

    
    if ( var14 > 100 )
    {
        AI_ELIZABETH_STOJKOVIC();
        return;
    }

    
    if ( ( ( ( ( ( ( ( AI_CHK_PLAYER_ID( PartyMember.Yukari ) == 1 ) || ( AI_CHK_PLAYER_ID( PartyMember.Aigis ) == 1 ) ) || ( AI_CHK_PLAYER_ID( PartyMember.Mitsuru ) == 1 ) ) || ( AI_CHK_PLAYER_ID( PartyMember.Junpei ) == 1 ) ) || ( AI_CHK_PLAYER_ID( PartyMember.Akihiko ) == 1 ) ) || ( AI_CHK_PLAYER_ID( PartyMember.Ken ) == 1 ) ) || ( AI_CHK_PLAYER_ID( PartyMember.ShinjiroMetis ) == 1 ) ) || ( AI_CHK_PLAYER_ID( PartyMember.Koromaru ) == 1 ) )
    {
        AI_ELIZABETH_STOJKOVIC();
        return;
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (480) = 5600
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (480) = 5600
    
    if ( ( AI_CHK_ENEMY_SKILL( BattleSkill.Armageddon ) == 1 ) || ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 480 ) ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 480 ) );
        AI_ELIZABETH_STOJKOVIC();
        return;
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (480) = 5600
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (480) = 5600
    
    if ( ( ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Tetrakarn ) == 1 ) || ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Makarakarn ) == 1 ) ) || ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 480 ) ) == 1 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 480 ) );
        AI_ELIZABETH_STOJKOVIC();
        return;
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (481) = 5601
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (481) = 5601
    
    if ( ( AI_SELF_HP_PERCENT( 50 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 481 ) ) == 0 ) )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 481 ) );
        AI_ELIZABETH_STOJKOVIC2();
        return;
    }

    
    if ( AI_SELF_HP_PERCENT( 30 ) == 1 )
    {
        AI_ELIZABETH_STOJKOVIC();
        return;
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    
    if ( ( AI_CHK_TURN() == 1 ) && ( AI_CHK_ONE_MORE() == 0 ) )
    {
        
        if ( ( ( ( ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) ) == 0 ) )
        {
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) );
        }
        else if ( ( ( ( ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) ) == 0 ) )
        {
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) );
        }
        else if ( ( ( ( ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 1 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) ) == 0 ) )
        {
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) );
        }
        else if ( ( ( ( ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) ) == 1 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) ) == 0 ) )
        {
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) );
        }
        else if ( ( ( ( ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) ) == 1 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) ) == 0 ) )
        {
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) );
        }
        else if ( ( ( ( ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) ) == 1 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) ) == 0 ) )
        {
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) );
        }
        else if ( ( ( ( ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) ) == 1 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) ) == 0 ) )
        {
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) );
        }
        else if ( ( ( ( ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) ) == 1 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) ) == 0 ) )
        {
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) );
        }
        else 
        {
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) );
        }

    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (464) = 5584
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (465) = 5585
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (466) = 5586
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (467) = 5587
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (468) = 5588
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (469) = 5589
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (470) = 5590
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (471) = 5591
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 464 ) ) == 1 )
    {
        AI_ELIZABETH_SURUTO();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 465 ) ) == 1 )
    {
        AI_ELIZABETH_JACK();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 466 ) ) == 1 )
    {
        AI_ELIZABETH_TORU();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 467 ) ) == 1 )
    {
        AI_ELIZABETH_KUR();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 468 ) ) == 1 )
    {
        AI_ELIZABETH_META();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 469 ) ) == 1 )
    {
        AI_ELIZABETH_ARISU();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 470 ) ) == 1 )
    {
        AI_ELIZABETH_NEVI();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 471 ) ) == 1 )
    {
        AI_ELIZABETH_MASA();
        return;
    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

    AI_ACT_WAIT();
}


// Procedure Index: 137
void AI_ELIZABETH_SURUTO()
{
    int var15;
    var15 = AI_RND( 100 );
    AI_AFFINITY_SWITCH( 216 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (451) = 5571
    
    if ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 451 ) ) == 0 ) )
    {
        
        if ( var15 < 55 )
        {
            AI_ACT_PERSONA( Persona.Surt, BattleSkill.MaragidyneBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var15 < 70 )
        {
            AI_ACT_ATTACK( BattleSkill.SlashAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else if ( var15 < 85 )
        {
            AI_ACT_ATTACK( BattleSkill.PierceAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_ATTACK( BattleSkill.StrikeAttackElizabeth );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ELIZABETH_MASA();
        return;
    }

}


// Procedure Index: 138
void AI_ELIZABETH_JACK()
{
    int var16;
    var16 = AI_RND( 100 );
    AI_AFFINITY_SWITCH( 217 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (452) = 5572
    
    if ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 452 ) ) == 0 ) )
    {
        
        if ( var16 < 55 )
        {
            AI_ACT_PERSONA( Persona.JackFrost, BattleSkill.MabufudyneBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var16 < 70 )
        {
            AI_ACT_ATTACK( BattleSkill.SlashAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else if ( var16 < 85 )
        {
            AI_ACT_ATTACK( BattleSkill.PierceAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_ATTACK( BattleSkill.StrikeAttackElizabeth );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ELIZABETH_MASA();
        return;
    }

}


// Procedure Index: 139
void AI_ELIZABETH_TORU()
{
    int var17;
    var17 = AI_RND( 100 );
    AI_AFFINITY_SWITCH( 218 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (453) = 5573
    
    if ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 453 ) ) == 0 ) )
    {
        
        if ( var17 < 55 )
        {
            AI_ACT_PERSONA( Persona.Thor, BattleSkill.MaziodyneBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var17 < 70 )
        {
            AI_ACT_ATTACK( BattleSkill.SlashAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else if ( var17 < 85 )
        {
            AI_ACT_ATTACK( BattleSkill.PierceAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_ATTACK( BattleSkill.StrikeAttackElizabeth );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ELIZABETH_MASA();
        return;
    }

}


// Procedure Index: 140
void AI_ELIZABETH_KUR()
{
    int var18;
    var18 = AI_RND( 100 );
    AI_AFFINITY_SWITCH( 219 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (454) = 5574
    
    if ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 454 ) ) == 0 ) )
    {
        
        if ( var18 < 55 )
        {
            AI_ACT_PERSONA( Persona.CuChulainn, BattleSkill.MagarudyneBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var18 < 70 )
        {
            AI_ACT_ATTACK( BattleSkill.SlashAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else if ( var18 < 85 )
        {
            AI_ACT_ATTACK( BattleSkill.PierceAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_ATTACK( BattleSkill.StrikeAttackElizabeth );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ELIZABETH_MASA();
        return;
    }

}


// Procedure Index: 141
void AI_ELIZABETH_META()
{
    int var19;
    var19 = AI_RND( 100 );
    AI_AFFINITY_SWITCH( BattleUnit.ElizabethMetatron );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (455) = 5575
    
    if ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 455 ) ) == 0 ) )
    {
        
        if ( var19 < 55 )
        {
            AI_ACT_PERSONA( Persona.Metatron, BattleSkill.MahamaonBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var19 < 70 )
        {
            AI_ACT_ATTACK( BattleSkill.SlashAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else if ( var19 < 85 )
        {
            AI_ACT_ATTACK( BattleSkill.PierceAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_ATTACK( BattleSkill.StrikeAttackElizabeth );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ELIZABETH_MASA();
        return;
    }

}


// Procedure Index: 142
void AI_ELIZABETH_ARISU()
{
    int var20;
    var20 = AI_RND( 100 );
    AI_AFFINITY_SWITCH( BattleUnit.ElizabethAlice );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (456) = 5576
    
    if ( ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 456 ) ) == 0 ) )
    {
        
        if ( var20 < 55 )
        {
            AI_ACT_PERSONA( Persona.Alice, BattleSkill.MamudoonBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var20 < 70 )
        {
            AI_ACT_ATTACK( BattleSkill.SlashAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else if ( var20 < 85 )
        {
            AI_ACT_ATTACK( BattleSkill.PierceAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_ATTACK( BattleSkill.StrikeAttackElizabeth );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ELIZABETH_MASA();
        return;
    }

}


// Procedure Index: 143
void AI_ELIZABETH_NEVI()
{
    int var21;
    var21 = AI_RND( 100 );
    AI_AFFINITY_SWITCH( BattleUnit.ElizabethNebiros );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    
    if ( ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 0 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) ) == 0 ) )
    {
        
        if ( var21 < 15 )
        {
            AI_ACT_PERSONA( Persona.Nebiros, BattleSkill.SexyDanceBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var21 < 30 )
        {
            AI_ACT_PERSONA( Persona.Nebiros, BattleSkill.EerieSoundBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var21 < 45 )
        {
            AI_ACT_PERSONA( Persona.Nebiros, BattleSkill.TentarafooBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var21 < 60 )
        {
            AI_ACT_PERSONA( Persona.Nebiros, BattleSkill.EvilSmileBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var21 < 75 )
        {
            AI_ACT_PERSONA( Persona.Nebiros, BattleSkill.PoisonMistBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var21 < 82 )
        {
            AI_ACT_ATTACK( BattleSkill.SlashAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else if ( var21 < 90 )
        {
            AI_ACT_ATTACK( BattleSkill.PierceAttackElizabeth );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_ATTACK( BattleSkill.StrikeAttackElizabeth );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ELIZABETH_MASA();
        return;
    }

}


// Procedure Index: 144
void AI_ELIZABETH_MASA()
{
    AI_AFFINITY_SWITCH( BattleUnit.ElizabethMasakado );
    AI_ACT_PERSONA( Persona.Masakado, BattleSkill.MegidolaonBoss );
    AI_TAR_RND();
}


// Procedure Index: 145
void AI_ELIZABETH_MASA2()
{
    AI_AFFINITY_SWITCH( BattleUnit.ElizabethMasakado );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (510) = 5630
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (510) = 5630
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (510) = 5630
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (510) = 5630
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 510 ) ) == 0 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 510 ) );
        AI_ACT_PERSONA( Persona.Masakado, BattleSkill.MegidolaonBoss );
        AI_TAR_RND();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 510 ) ) == 1 )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 510 ) );
        AI_WAIT_CUSTOM( 224 );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 146
void AI_ELIZABETH_STOJKOVIC()
{
    AI_AFFINITY_SWITCH( BattleUnit.ElizabethPixie );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (511) = 5631
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (511) = 5631
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (511) = 5631
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (511) = 5631
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 511 ) ) == 0 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 511 ) );
        AI_ACT_PERSONA( Persona.Pixie, BattleSkill.Diarahan );
        AI_TAR_SELF();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 511 ) ) == 1 )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 511 ) );
        AI_ACT_PERSONA( Persona.Pixie, BattleSkill.MegidolaonBoss );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 147
void AI_ELIZABETH_STOJKOVIC2()
{
    AI_AFFINITY_SWITCH( BattleUnit.ElizabethPixie );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (509) = 5629
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (509) = 5629
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (509) = 5629
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (509) = 5629
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 509 ) ) == 0 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 509 ) );
        AI_ACT_PERSONA( Persona.Pixie, BattleSkill.Diarahan );
        AI_TAR_SELF();
        return;
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 509 ) ) == 1 )
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 509 ) );
        AI_WAIT_CUSTOM( 224 );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 148
void AI_DEBUG()
{
    
    if ( AI_ALLY_COUNT( 4 ) == 1 )
    {
        FUNCTION_0074( 1 );
        return;
    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 149
void AI_OSHIETE_MAYA()
{
    int var22;
    var22 = AI_RND( 100 );
    
    if ( FUNCTION_0158( 1, 20 ) == 1 )
    {
        
        if ( var22 < 50 )
        {
            AI_WAIT_CUSTOM( 218 );
            AI_TAR_SELF();
            return;
        }
        else if ( var22 < ( 50 + 50 ) )
        {
            
            if ( ( AI_CHK_PLAYER_ID( PartyMember.Yukari ) == 1 ) || ( AI_CHK_PLAYER_ID( PartyMember.Junpei ) == 1 ) )
            {
                AI_ACT_WEAPON();
                AI_TAR_UNKNOWN_013D( 1 );
                return;
            }
            else 
            {
                AI_WAIT_CUSTOM( 218 );
                AI_TAR_SELF();
                return;
            }

        }

    }
    else if ( FUNCTION_0158( 1, 20 ) == 0 )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 150
void AI_Eagle()
{
    int var23;
    int var24;
    int var25;
    var23 = AI_RND( 100 );
    var24 = AI_RND( 100 );
    var25 = AI_RND( 100 );
    
    if ( var23 < 25 )
    {
        AI_ACT_SKILL( BattleSkill.Garu );
        AI_TAR_RND();
    }
    else if ( var23 < ( 25 + 45 ) )
    {
        
        if ( FUNCTION_0057( 13 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Garu );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( var23 < ( ( 25 + 45 ) + 30 ) )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 151
void AI_HENYOU()
{
    int var26;
    int var27;
    var26 = AI_RND( 100 );
    var27 = AI_RND( 100 );
    
    if ( AI_SELF_HP_PERCENT( 30 ) == 0 )
    {
        
        if ( var26 < 20 )
        {
            AI_ACT_SKILL( BattleSkill.Garula );
            AI_TAR_RND();
            return;
        }
        else if ( var26 < ( 20 + 35 ) )
        {
            AI_ACT_SKILL( BattleSkill.Magarula );
            AI_TAR_RND();
        }
        else if ( var26 < ( ( 20 + 35 ) + 10 ) )
        {
            
            if ( AI_CHK_SELF_EFFECT( SpecialEffects.DefenseDebuff ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Dekunda );
                AI_TAR_SELF();
                return;
            }
            else if ( AI_CHK_SELF_EFFECT( SpecialEffects.DefenseBuff ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Rakukaja );
                AI_TAR_SELF();
                return;
            }
            else 
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else if ( var26 < ( ( ( 20 + 35 ) + 10 ) + 5 ) )
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }
        else if ( var26 < ( ( ( ( 20 + 35 ) + 10 ) + 5 ) + 30 ) )
        {
            
            if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Poison ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.PoisonMist );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Garula );
                AI_TAR_RND();
                return;
            }

        }

    }
    else if ( AI_SELF_HP_PERCENT( 30 ) == 1 )
    {
        
        if ( var27 < 10 )
        {
            
            if ( FUNCTION_0057( 192 ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Dia );
                AI_TAR_SELF();
                return;
            }
            else 
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else if ( var27 < ( 10 + 5 ) )
        {
            
            if ( AI_CHK_SELF_EFFECT( SpecialEffects.DefenseDebuff ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Dekunda );
                AI_TAR_SELF();
                return;
            }
            else if ( AI_CHK_SELF_EFFECT( SpecialEffects.DefenseBuff ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Rakukaja );
                AI_TAR_SELF();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Magarula );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var27 < ( ( 10 + 5 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Garula );
            AI_TAR_RND();
            return;
        }
        else if ( var27 < ( ( ( 10 + 5 ) + 25 ) + 35 ) )
        {
            AI_ACT_SKILL( BattleSkill.Magarula );
            AI_TAR_RND();
            return;
        }
        else if ( var27 < ( ( ( ( 10 + 5 ) + 25 ) + 35 ) + 20 ) )
        {
            
            if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Poison ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.PoisonMist );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else if ( var27 < ( ( ( ( ( 10 + 5 ) + 25 ) + 35 ) + 20 ) + 5 ) )
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 152
void AI_KING()
{
    int var28;
    var28 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Megido );
        AI_TAR_RND();
        return;
    }

    
    if ( var28 < 10 )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Fear ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.EvilTouch );
            AI_DONT_TAR_STATUS( StatusEffects.Fear );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Hamaon );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var28 < ( 10 + 20 ) )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Fear ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.EvilSmile );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.MindCharge );
            AI_TAR_SELF();
            return;
        }

    }
    else if ( var28 < ( ( 10 + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.MindCharge );
        AI_TAR_SELF();
        return;
    }
    else if ( var28 < ( ( ( 10 + 20 ) + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.Hamaon );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Mahamaon );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 153
void AI_DANCING_KAI()
{
    int var29;
    int var30;
    var29 = AI_RND( 100 );
    var30 = AI_RND( 100 );
    
    if ( AI_SELF_HP_PERCENT( 60 ) == 0 )
    {
        
        if ( var29 < 30 )
        {
            AI_ACT_SKILL( BattleSkill.Zio );
            AI_DONT_TAR_STATUS( StatusEffects.Downed );
            return;
        }
        else if ( var29 < ( 30 + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufu );
            AI_DONT_TAR_STATUS( StatusEffects.Downed );
            return;
        }
        else if ( var29 < ( ( 30 + 30 ) + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.Agi );
            AI_DONT_TAR_STATUS( StatusEffects.Downed );
            return;
        }
        else if ( var29 < ( ( ( 30 + 30 ) + 30 ) + 10 ) )
        {
            
            if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Panic ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Tentarafoo );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Agi );
                AI_DONT_TAR_STATUS( StatusEffects.Downed );
                return;
            }

        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 60 ) == 1 )
    {
        
        if ( var30 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.Magaru );
            AI_TAR_RND();
            return;
        }
        else if ( var30 < ( 50 + 5 ) )
        {
            AI_ACT_SKILL( BattleSkill.Dia );
            FUNCTION_0060();
            return;
        }
        else if ( var30 < ( ( 50 + 5 ) + 15 ) )
        {
            AI_ACT_SKILL( BattleSkill.Zio );
            AI_TAR_RND();
            return;
        }
        else if ( var30 < ( ( ( 50 + 5 ) + 15 ) + 15 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufu );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Agi );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 154
void AI_NAKU_KAI()
{
    int var31;
    int var32;
    var31 = AI_RND( 100 );
    var32 = AI_RND( 100 );
    
    if ( AI_CHK_ONE_MORE() == 0 )
    {
        
        if ( var31 < 30 )
        {
            AI_ACT_SKILL( BattleSkill.Maragi );
            AI_TAR_RND();
            return;
        }
        else if ( var31 < ( 30 + 50 ) )
        {
            AI_ACT_SKILL( BattleSkill.Agilao );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Poison ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Poisma );
            AI_DONT_TAR_STATUS( StatusEffects.Poison );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Maragi );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_CHK_ONE_MORE() == 1 )
    {
        
        if ( var32 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.MightySwing );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.TorrentShot );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 155
void AI_GOUKI_KAI()
{
    int var33;
    int var34;
    var33 = AI_RND( 100 );
    var34 = AI_RND( 100 );
    
    if ( FUNCTION_0047() == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Tarukaja );
        AI_TAR_SELF();
        return;
    }

    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.AttackBuff ) == 1 )
    {
        
        if ( var34 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.KillRush );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_CHK_SELF_EFFECT( SpecialEffects.AttackBuff ) == 0 )
    {
        
        if ( var33 < 40 )
        {
            AI_ACT_SKILL( BattleSkill.Tarukaja );
            AI_TAR_SELF();
            return;
        }
        else if ( var33 < ( 40 + 20 ) )
        {
            
            if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Marakunda );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else if ( var33 < ( ( 40 + 20 ) + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.TorrentShot );
            AI_TAR_RND();
            return;
        }
        else if ( var33 < ( ( ( 40 + 20 ) + 30 ) + 10 ) )
        {
            
            if ( AI_CHK_NUM_ALLIES_EFFECTED( SpecialEffects.HitUpBuff ) < 3 )
            {
                AI_ACT_SKILL( BattleSkill.Sukukaja );
                AI_DONT_TAR_EFFECT( SpecialEffects.HitAndEvasionUpBuff );
            }
            else 
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WAIT();
            AI_TAR_SELF();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        AI_TAR_SELF();
        return;
    }

}


// Procedure Index: 156
void AI_FUKUTU_KAI()
{
    int var35;
    int var36;
    int var37;
    int var38;
    var35 = AI_RND( 100 );
    var36 = AI_RND( 100 );
    var37 = AI_RND( 100 );
    var38 = AI_RND( 100 );
    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Dia );
        AI_TAR_SELF();
        return;
    }

    
    if ( AI_SELF_HP_PERCENT( 30 ) == 0 )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
        {
            
            if ( var36 < 70 )
            {
                AI_ACT_SKILL( BattleSkill.Magarula );
                AI_TAR_RND();
                return;
            }
            else if ( var36 < ( 70 + 30 ) )
            {
                AI_ACT_SKILL( BattleSkill.Garudyne );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_WAIT();
                AI_TAR_SELF();
                return;
            }

        }
        else if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
        {
            
            if ( ( ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 1 ) || ( AI_EN_HAS_NULL( Affinity.Wind ) == 1 ) ) || ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 1 ) )
            {
                
                if ( var38 < 50 )
                {
                    
                    if ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.WindBreak );
                        AI_TAR_REFLECT( Affinity.Wind );
                        return;
                    }
                    else if ( AI_EN_HAS_NULL( Affinity.Wind ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.WindBreak );
                        AI_TAR_NULL( Affinity.Wind );
                        return;
                    }
                    else if ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.WindBreak );
                        AI_TAR_ABSORB( Affinity.Wind );
                        return;
                    }

                }
                else if ( var38 < ( 50 + 50 ) )
                {
                    
                    if ( var35 < 30 )
                    {
                        AI_ACT_SKILL( BattleSkill.Garudyne );
                        AI_TAR_RND();
                        return;
                    }
                    else if ( var35 < ( 30 + 15 ) )
                    {
                        AI_ACT_SKILL( BattleSkill.KillRush );
                        AI_TAR_RND();
                        return;
                    }
                    else if ( var35 < ( ( 30 + 15 ) + 30 ) )
                    {
                        AI_ACT_SKILL( BattleSkill.MindCharge );
                        AI_TAR_SELF();
                        return;
                    }
                    else if ( var35 < ( ( ( 30 + 15 ) + 30 ) + 20 ) )
                    {
                        AI_ACT_SKILL( BattleSkill.Hama );
                        AI_TAR_RND();
                        return;
                    }
                    else 
                    {
                        AI_ACT_WEAPON();
                        AI_TAR_RND();
                        return;
                    }

                }
                else 
                {
                    AI_ACT_WAIT();
                    AI_TAR_SELF();
                    return;
                }

            }
            else if ( var35 < 30 )
            {
                AI_ACT_SKILL( BattleSkill.Garudyne );
                AI_TAR_RND();
                return;
            }
            else if ( var35 < ( 30 + 15 ) )
            {
                AI_ACT_SKILL( BattleSkill.KillRush );
                AI_TAR_RND();
                return;
            }
            else if ( var35 < ( ( 30 + 15 ) + 30 ) )
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }
            else if ( var35 < ( ( ( 30 + 15 ) + 30 ) + 20 ) )
            {
                AI_ACT_SKILL( BattleSkill.Hama );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WAIT();
            AI_TAR_SELF();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 30 ) == 1 )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
        {
            
            if ( var36 < 70 )
            {
                AI_ACT_SKILL( BattleSkill.Magarula );
                AI_TAR_RND();
                return;
            }
            else if ( var36 < ( 70 + 30 ) )
            {
                AI_ACT_SKILL( BattleSkill.Garudyne );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_WAIT();
                AI_TAR_SELF();
                return;
            }

        }
        else if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
        {
            
            if ( ( ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 1 ) || ( AI_EN_HAS_NULL( Affinity.Wind ) == 1 ) ) || ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 1 ) )
            {
                
                if ( var38 < 50 )
                {
                    
                    if ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.WindBreak );
                        AI_TAR_REFLECT( Affinity.Wind );
                        return;
                    }
                    else if ( AI_EN_HAS_NULL( Affinity.Wind ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.WindBreak );
                        AI_TAR_NULL( Affinity.Wind );
                        return;
                    }
                    else if ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.WindBreak );
                        AI_TAR_ABSORB( Affinity.Wind );
                        return;
                    }

                }
                else if ( var38 < ( 50 + 50 ) )
                {
                    
                    if ( var37 < 10 )
                    {
                        AI_ACT_SKILL( BattleSkill.HeatWave );
                        AI_TAR_RND();
                        return;
                    }
                    else if ( var37 < ( 10 + 25 ) )
                    {
                        AI_ACT_SKILL( BattleSkill.MindCharge );
                        AI_TAR_SELF();
                        return;
                    }
                    else if ( var37 < ( ( 10 + 25 ) + 35 ) )
                    {
                        AI_ACT_SKILL( BattleSkill.Garudyne );
                        AI_TAR_RND();
                        return;
                    }
                    else if ( var37 < ( ( ( 10 + 25 ) + 35 ) + 20 ) )
                    {
                        
                        if ( AI_CHK_SELF_EFFECT( SpecialEffects.DefenseBuff ) == 0 )
                        {
                            AI_ACT_SKILL( BattleSkill.Rakukaja );
                            AI_TAR_SELF();
                            return;
                        }
                        else 
                        {
                            AI_ACT_SKILL( BattleSkill.KillRush );
                            AI_TAR_RND();
                        }

                    }
                    else if ( var37 < ( ( ( ( 10 + 25 ) + 35 ) + 20 ) + 10 ) )
                    {
                        
                        if ( AI_CHK_SELF_EFFECT( SpecialEffects.Makarakarn ) == 0 )
                        {
                            AI_ACT_SKILL( 242 );
                            AI_TAR_RND();
                            return;
                        }
                        else 
                        {
                            AI_ACT_SKILL( BattleSkill.KillRush );
                            AI_TAR_RND();
                            return;
                        }

                    }
                    else 
                    {
                        AI_ACT_WAIT();
                        AI_TAR_RND();
                        return;
                    }

                }
                else 
                {
                    AI_ACT_WAIT();
                    AI_TAR_SELF();
                    return;
                }

            }
            else if ( var37 < 10 )
            {
                AI_ACT_SKILL( BattleSkill.HeatWave );
                AI_TAR_RND();
                return;
            }
            else if ( var37 < ( 10 + 25 ) )
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }
            else if ( var37 < ( ( 10 + 25 ) + 35 ) )
            {
                AI_ACT_SKILL( BattleSkill.Garudyne );
                AI_TAR_RND();
                return;
            }
            else if ( var37 < ( ( ( 10 + 25 ) + 35 ) + 20 ) )
            {
                
                if ( AI_CHK_SELF_EFFECT( SpecialEffects.DefenseBuff ) == 0 )
                {
                    AI_ACT_SKILL( BattleSkill.Rakukaja );
                    AI_TAR_SELF();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.KillRush );
                    AI_TAR_RND();
                }

            }
            else if ( var37 < ( ( ( ( 10 + 25 ) + 35 ) + 20 ) + 10 ) )
            {
                
                if ( AI_CHK_SELF_EFFECT( SpecialEffects.Makarakarn ) == 0 )
                {
                    AI_ACT_SKILL( 242 );
                    AI_TAR_RND();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.KillRush );
                    AI_TAR_RND();
                    return;
                }

            }
            else 
            {
                AI_ACT_WAIT();
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WAIT();
            AI_TAR_SELF();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        AI_TAR_SELF();
        return;
    }

}


// Procedure Index: 157
void AI_GAIA_KAI()
{
    int var39;
    int var40;
    int var41;
    var39 = AI_RND( 100 );
    var40 = AI_RND( 100 );
    var41 = AI_RND( 100 );
    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        AI_ACT_SKILL( BattleSkill.LifeDrain );
        AI_TAR_RND();
        return;
    }

    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        
        if ( var40 < 40 )
        {
            
            if ( var41 < 10 )
            {
                AI_ACT_SKILL( BattleSkill.GiganticFist );
                AI_TAR_UNIT( BattleUnit.CowardlyMaya );
                return;
            }
            else if ( var41 < ( 10 + 90 ) )
            {
                AI_ACT_SKILL( BattleSkill.GiganticFist );
                AI_TAR_UNKNOWN_013D( 1 );
                return;
            }
            else 
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else if ( var40 < ( 40 + 40 ) )
        {
            
            if ( var41 < 10 )
            {
                AI_ACT_SKILL( BattleSkill.FatalEnd );
                AI_TAR_UNIT( BattleUnit.CowardlyMaya );
                return;
            }
            else if ( var41 < ( 10 + 90 ) )
            {
                AI_ACT_SKILL( BattleSkill.FatalEnd );
                AI_TAR_UNKNOWN_013D( 1 );
                return;
            }
            else 
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 0 )
    {
        
        if ( var39 < 40 )
        {
            AI_ACT_SKILL( BattleSkill.PowerCharge );
            AI_TAR_SELF();
            return;
        }
        else if ( var39 < ( 40 + 30 ) )
        {
            
            if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Rebellion ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Rebellion );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.PowerCharge );
                AI_TAR_SELF();
                return;
            }

        }
        else if ( var39 < ( ( 40 + 30 ) + 15 ) )
        {
            
            if ( AI_CHK_ALLY_EFFECT( SpecialEffects.HitUpBuff ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Sukukaja );
                AI_DONT_TAR_EFFECT( SpecialEffects.HitAndEvasionUpBuff );
                return;
            }
            else 
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        AI_TAR_SELF();
        return;
    }

}


// Procedure Index: 158
void AI_MEGATON_KAI()
{
    int var42;
    int var43;
    var42 = AI_RND( 100 );
    var43 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        
        if ( var43 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }
        else if ( var43 < ( 50 + 50 ) )
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WAIT();
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        AI_ACT_SKILL( BattleSkill.VileAssault );
        AI_TAR_STATUS( StatusEffects.Downed );
        return;
    }

    
    if ( var42 < 15 )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Despair ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.EerieSound );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.MindCharge );
            AI_TAR_SELF();
            return;
        }

    }
    else if ( var42 < ( 15 + 20 ) )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Marakunda );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( var42 < ( ( 15 + 20 ) + 35 ) )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }
    else if ( var42 < ( ( ( 15 + 20 ) + 35 ) + 30 ) )
    {
        AI_ACT_SKILL( BattleSkill.MindCharge );
        AI_TAR_SELF();
        return;
    }
    else 
    {
        AI_ACT_WAIT();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 159
void AI_NEMURU_KAI()
{
    int var44;
    var44 = AI_RND( 100 );
    
    if ( AI_CHK_ENEMY_STATUS( StatusEffects.Fear ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.GhastlyWail );
        AI_TAR_RND();
        return;
    }

    
    if ( var44 < 25 )
    {
        
        if ( AI_ENEMY_COUNT( 1 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Hamaon );
            AI_TAR_UNKNOWN_013D( 1 );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var44 < ( 25 + 35 ) )
    {
        AI_ACT_SKILL( BattleSkill.Maragidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var44 < ( ( 25 + 35 ) + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.Megidola );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Fear ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.EvilTouch );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.GhastlyWail );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 160
void AI_JIGOKU_KAI()
{
    int var45;
    int var46;
    int var47;
    int var48;
    var45 = AI_RND( 100 );
    var46 = AI_RND( 100 );
    var47 = AI_RND( 100 );
    var48 = AI_RND( 100 );
    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Poison ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.PoisonMist );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_SELF_HP_PERCENT( 30 ) == 0 )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
        {
            
            if ( var46 < 70 )
            {
                AI_ACT_SKILL( BattleSkill.Maziodyne );
                AI_TAR_RND();
                return;
            }
            else if ( var46 < ( 70 + 30 ) )
            {
                AI_ACT_SKILL( BattleSkill.Ziodyne );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_WAIT();
                AI_TAR_SELF();
                return;
            }

        }
        else if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
        {
            
            if ( ( ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 ) || ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 ) ) || ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 ) )
            {
                
                if ( var48 < 50 )
                {
                    
                    if ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.ElecBreak );
                        AI_TAR_REFLECT( Affinity.Elec );
                        return;
                    }
                    else if ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.ElecBreak );
                        AI_TAR_NULL( Affinity.Elec );
                        return;
                    }
                    else if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.ElecBreak );
                        AI_TAR_ABSORB( Affinity.Elec );
                        return;
                    }

                }
                else if ( var48 < ( 50 + 50 ) )
                {
                    
                    if ( var45 < 30 )
                    {
                        AI_ACT_SKILL( BattleSkill.Ziodyne );
                        AI_TAR_RND();
                        return;
                    }
                    else if ( var45 < ( 30 + 20 ) )
                    {
                        AI_ACT_SKILL( BattleSkill.HeatWave );
                        AI_TAR_RND();
                        return;
                    }
                    else if ( var45 < ( ( 30 + 20 ) + 30 ) )
                    {
                        AI_ACT_SKILL( BattleSkill.MindCharge );
                        AI_TAR_SELF();
                        return;
                    }
                    else if ( var45 < ( ( ( 30 + 20 ) + 30 ) + 10 ) )
                    {
                        AI_ACT_SKILL( BattleSkill.Mudo );
                        AI_TAR_RND();
                        return;
                    }
                    else 
                    {
                        AI_ACT_WEAPON();
                        AI_TAR_RND();
                        return;
                    }

                }
                else 
                {
                    AI_ACT_WAIT();
                    AI_TAR_SELF();
                    return;
                }

            }
            else if ( var45 < 30 )
            {
                AI_ACT_SKILL( BattleSkill.Ziodyne );
                AI_TAR_RND();
                return;
            }
            else if ( var45 < ( 30 + 20 ) )
            {
                AI_ACT_SKILL( BattleSkill.HeatWave );
                AI_TAR_RND();
                return;
            }
            else if ( var45 < ( ( 30 + 20 ) + 30 ) )
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }
            else if ( var45 < ( ( ( 30 + 20 ) + 30 ) + 10 ) )
            {
                AI_ACT_SKILL( BattleSkill.Mudo );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WAIT();
            AI_TAR_SELF();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 30 ) == 1 )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
        {
            
            if ( var46 < 70 )
            {
                AI_ACT_SKILL( BattleSkill.Maziodyne );
                AI_TAR_RND();
                return;
            }
            else if ( var46 < ( 70 + 30 ) )
            {
                AI_ACT_SKILL( BattleSkill.Ziodyne );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_WAIT();
                AI_TAR_SELF();
                return;
            }

        }
        else if ( AI_CHK_SELF_EFFECT( 221 ) == 0 )
        {
            
            if ( ( ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 ) || ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 ) ) || ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 ) )
            {
                
                if ( var48 < 50 )
                {
                    
                    if ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.ElecBreak );
                        AI_TAR_REFLECT( Affinity.Elec );
                        return;
                    }
                    else if ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.ElecBreak );
                        AI_TAR_NULL( Affinity.Elec );
                        return;
                    }
                    else if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
                    {
                        AI_ACT_SKILL( BattleSkill.ElecBreak );
                        AI_TAR_ABSORB( Affinity.Elec );
                        return;
                    }

                }
                else if ( var48 < ( 50 + 50 ) )
                {
                    
                    if ( var47 < 20 )
                    {
                        AI_ACT_SKILL( BattleSkill.TorrentShot );
                        AI_TAR_RND();
                        return;
                    }
                    else if ( var47 < ( 20 + 20 ) )
                    {
                        AI_ACT_SKILL( BattleSkill.MindCharge );
                        AI_TAR_SELF();
                        return;
                    }
                    else if ( var47 < ( ( 20 + 20 ) + 30 ) )
                    {
                        AI_ACT_SKILL( BattleSkill.Ziodyne );
                        AI_TAR_RND();
                        return;
                    }
                    else if ( var47 < ( ( ( 20 + 20 ) + 30 ) + 20 ) )
                    {
                        
                        if ( AI_CHK_SELF_EFFECT( SpecialEffects.DefenseBuff ) == 0 )
                        {
                            AI_ACT_SKILL( BattleSkill.Rakukaja );
                            AI_TAR_SELF();
                            return;
                        }
                        else 
                        {
                            AI_ACT_SKILL( BattleSkill.TorrentShot );
                            AI_TAR_RND();
                        }

                    }
                    else if ( var47 < ( ( ( ( 20 + 20 ) + 30 ) + 20 ) + 10 ) )
                    {
                        
                        if ( AI_CHK_ALLY_EFFECT( SpecialEffects.Tetrakarn ) == 0 )
                        {
                            AI_ACT_SKILL( 241 );
                            AI_TAR_RND();
                            return;
                        }
                        else 
                        {
                            AI_ACT_SKILL( BattleSkill.TorrentShot );
                            AI_TAR_RND();
                            return;
                        }

                    }
                    else 
                    {
                        AI_ACT_WAIT();
                        AI_TAR_RND();
                        return;
                    }

                }
                else 
                {
                    AI_ACT_WAIT();
                    AI_TAR_SELF();
                    return;
                }

            }
            else if ( var47 < 20 )
            {
                AI_ACT_SKILL( BattleSkill.TorrentShot );
                AI_TAR_RND();
                return;
            }
            else if ( var47 < ( 20 + 20 ) )
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }
            else if ( var47 < ( ( 20 + 20 ) + 30 ) )
            {
                AI_ACT_SKILL( BattleSkill.Ziodyne );
                AI_TAR_RND();
                return;
            }
            else if ( var47 < ( ( ( 20 + 20 ) + 30 ) + 20 ) )
            {
                
                if ( AI_CHK_SELF_EFFECT( SpecialEffects.DefenseBuff ) == 0 )
                {
                    AI_ACT_SKILL( BattleSkill.Rakukaja );
                    AI_TAR_SELF();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.TorrentShot );
                    AI_TAR_RND();
                }

            }
            else if ( var47 < ( ( ( ( 20 + 20 ) + 30 ) + 20 ) + 10 ) )
            {
                
                if ( AI_CHK_ALLY_EFFECT( SpecialEffects.Tetrakarn ) == 0 )
                {
                    AI_ACT_SKILL( 241 );
                    AI_TAR_RND();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.TorrentShot );
                    AI_TAR_RND();
                    return;
                }

            }
            else 
            {
                AI_ACT_WAIT();
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WAIT();
            AI_TAR_SELF();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        AI_TAR_SELF();
        return;
    }

}


// Procedure Index: 161
void AI_BURNING()
{
    int var49;
    int var50;
    var49 = AI_RND( 100 );
    var50 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        
        if ( var50 < 70 )
        {
            AI_ACT_SKILL( BattleSkill.VileAssault );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Deathbound );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 0 )
    {
        
        if ( var49 < 25 )
        {
            AI_ACT_SKILL( BattleSkill.PowerCharge );
            AI_TAR_SELF();
            return;
        }
        else if ( var49 < ( 25 + 20 ) )
        {
            
            if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Marakunda );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Maragidyne );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var49 < ( ( 25 + 20 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Deathbound );
            AI_TAR_RND();
            return;
        }
        else if ( var49 < ( ( ( 25 + 20 ) + 25 ) + 15 ) )
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        AI_TAR_SELF();
        return;
    }

}


// Procedure Index: 162
void AI_HEIKOU_KAI()
{
    int var51;
    int var52;
    var51 = AI_RND( 100 );
    var52 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        
        if ( var52 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.GiganticFist );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.BladeofFury );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        
        if ( AI_CHK_ALLIES_STATUS( StatusEffects.Poison ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Posumudi );
            AI_TAR_STATUS( StatusEffects.Poison );
            return;
        }
        else if ( AI_CHK_ALLIES_STATUS( StatusEffects.Panic ) == 1 )
        {
            
            if ( AI_CHK_SELF_STATUS( StatusEffects.Panic ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.MePatra );
                AI_TAR_RND();
                return;
            }
            else if ( AI_CHK_SELF_STATUS( StatusEffects.Panic ) == 1 )
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else if ( FUNCTION_0035( 90 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Diarama );
            FUNCTION_0060();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.FatalEnd );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_CHK_ONE_MORE() == 0 )
    {
        
        if ( var51 < 10 )
        {
            AI_ACT_SKILL( BattleSkill.GiganticFist );
            AI_TAR_RND();
            return;
        }
        else if ( var51 < ( 10 + 5 ) )
        {
            AI_ACT_SKILL( BattleSkill.Zanei );
            AI_TAR_RND();
            return;
        }
        else if ( var51 < ( ( 10 + 5 ) + 10 ) )
        {
            AI_ACT_SKILL( BattleSkill.MightySwing );
            AI_TAR_RND();
            return;
        }
        else if ( var51 < ( ( ( 10 + 5 ) + 10 ) + 5 ) )
        {
            AI_ACT_SKILL( BattleSkill.DoubleFangs );
            AI_TAR_RND();
            return;
        }
        else if ( var51 < ( ( ( ( 10 + 5 ) + 10 ) + 5 ) + 10 ) )
        {
            AI_ACT_SKILL( BattleSkill.BladeofFury );
            AI_TAR_RND();
            return;
        }
        else if ( var51 < ( ( ( ( ( 10 + 5 ) + 10 ) + 5 ) + 10 ) + 15 ) )
        {
            
            if ( FUNCTION_0058( 0x80 ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Deathbound );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.TempestSlash );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var51 < ( ( ( ( ( ( 10 + 5 ) + 10 ) + 5 ) + 10 ) + 15 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.TempestSlash );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.PowerCharge );
            AI_TAR_SELF();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Deathbound );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        AI_TAR_SELF();
        return;
    }

}


// Procedure Index: 163
void AI_TENBATU()
{
    int var53;
    var53 = AI_RND( 100 );
    
    if ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Rage ) == 1 ) && ( AI_CHK_SELF_EFFECT( SpecialEffects.Tetrakarn ) == 0 ) )
    {
        AI_ACT_SKILL( 241 );
        AI_TAR_RND();
        return;
    }

    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.Tetrakarn ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Provoke );
        AI_TAR_RND();
        return;
    }

    
    if ( var53 < 30 )
    {
        AI_ACT_SKILL( BattleSkill.Megidola );
        AI_TAR_RND();
        return;
    }
    else if ( var53 < ( 30 + 30 ) )
    {
        
        if ( FUNCTION_0057( 39 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Megidolaon );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Megidola );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var53 < ( ( 30 + 30 ) + 30 ) )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.Tetrakarn ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Provoke );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( 241 );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_CHK_ALLY_EFFECT( SpecialEffects.Tetrakarn ) == 0 )
    {
        AI_ACT_SKILL( 241 );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Megidolaon );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 164
void AI_ROYAL_KAI()
{
    int var54;
    var54 = AI_RND( 100 );
    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        
        if ( AI_SELF_HP_PERCENT( 90 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Dia );
            FUNCTION_0060();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_CHK_ALLIES_STATUS( StatusEffects.Charm ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Charmdi );
        AI_TAR_STATUS( StatusEffects.Charm );
        return;
    }

    
    if ( AI_CHK_ALLIES_STATUS( StatusEffects.Panic ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Patra );
        AI_TAR_STATUS( StatusEffects.Panic );
        return;
    }

    
    if ( AI_CHK_ALLIES_STATUS( StatusEffects.Poison ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Posumudi );
        AI_TAR_STATUS( StatusEffects.Poison );
        return;
    }

    
    if ( AI_CHK_ALLIES_STATUS( StatusEffects.Fear ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Patra );
        AI_TAR_STATUS( StatusEffects.Fear );
        return;
    }

    
    if ( var54 < 20 )
    {
        
        if ( AI_CHK_PLAYER_ID( PartyMember.Yukari ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.MarinKarin );
            AI_TAR_UNIT( BattleUnit.Test );
            return;
        }
        else if ( ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Charm ) == 1 ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 1 ) ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 1 ) )
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }
        else if ( ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Charm ) == 0 ) && ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 0 ) ) && ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.MarinKarin );
            AI_DONT_TAR_STATUS( StatusEffects.Charm );
            return;
        }
        else 
        {
            AI_ACT_WAIT();
            AI_TAR_SELF();
            return;
        }

    }
    else if ( var54 < ( 20 + 10 ) )
    {
        
        if ( ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Charm ) == 0 ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 0 ) ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.SexyDance );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.MightySwing );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var54 < ( ( 20 + 10 ) + 20 ) )
    {
        
        if ( ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 1 ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Charm ) == 1 ) ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 1 ) )
        {
            AI_ACT_SKILL( BattleSkill.HeatWave );
            AI_TAR_RND();
            return;
        }
        else if ( ( ( AI_CHK_ENEMY_STATUS( 13 ) == 0 ) && ( AI_CHK_ENEMY_STATUS( StatusEffects.Charm ) == 0 ) ) && ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Pulinpa );
            AI_DONT_TAR_STATUS( 13 );
            return;
        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }
    else if ( var54 < ( ( ( 20 + 10 ) + 20 ) + 10 ) )
    {
        
        if ( ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 0 ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Charm ) == 0 ) ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Tentarafoo );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( var54 < ( ( ( ( 20 + 10 ) + 20 ) + 10 ) + 20 ) )
    {
        
        if ( ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 1 ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Charm ) == 1 ) ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 1 ) )
        {
            AI_ACT_SKILL( BattleSkill.Poisma );
            AI_TAR_RND();
            return;
        }
        else if ( ( ( AI_CHK_ENEMY_STATUS( 13 ) == 0 ) && ( AI_CHK_ENEMY_STATUS( StatusEffects.Charm ) == 0 ) ) && ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Poisma );
            AI_DONT_TAR_STATUS( StatusEffects.Poison );
            return;
        }
        else 
        {
            AI_ACT_WAIT();
            AI_TAR_SELF();
            return;
        }

    }
    else if ( var54 < ( ( ( ( ( 20 + 10 ) + 20 ) + 10 ) + 20 ) + 10 ) )
    {
        
        if ( ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 0 ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Charm ) == 0 ) ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.PoisonMist );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.PrimalForce );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.PrimalForce );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 165
void AI_NORBLE_KAI()
{
    int var55;
    int var56;
    var55 = AI_RND( 100 );
    var56 = AI_RND( 100 );
    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        
        if ( FUNCTION_0058( 144 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.VorpalBlade );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.LifeDrain );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_SELF_HP_PERCENT( 20 ) == 0 )
    {
        
        if ( var55 < 25 )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }
        else if ( var55 < ( 25 + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var55 < ( ( 25 + 25 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_RND();
            return;
        }
        else if ( var55 < ( ( ( 25 + 25 ) + 25 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 20 ) == 1 )
    {
        
        if ( var56 < 18 )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }
        else if ( var56 < ( 18 + 18 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var56 < ( ( 18 + 18 ) + 18 ) )
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_RND();
            return;
        }
        else if ( var56 < ( ( ( 18 + 18 ) + 18 ) + 18 ) )
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var56 < ( ( ( ( 18 + 18 ) + 18 ) + 18 ) + 7 ) )
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }
        else if ( var56 < ( ( ( ( ( 18 + 18 ) + 18 ) + 18 ) + 7 ) + 7 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mabufudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var56 < ( ( ( ( ( ( 18 + 18 ) + 18 ) + 18 ) + 7 ) + 7 ) + 7 ) )
        {
            AI_ACT_SKILL( BattleSkill.Maziodyne );
            AI_TAR_RND();
            return;
        }
        else if ( var56 < ( ( ( ( ( ( ( 18 + 18 ) + 18 ) + 18 ) + 7 ) + 7 ) + 7 ) + 7 ) )
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 166
void AI_NIKUYOKU_KAI()
{
    int var57;
    int var58;
    var57 = AI_RND( 100 );
    var58 = AI_RND( 100 );
    
    if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_REFLECT( Affinity.Fire );
        return;
    }
    else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_NULL( Affinity.Fire );
        return;
    }
    else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_ABSORB( Affinity.Fire );
        return;
    }

    
    if ( AI_SELF_HP_PERCENT( 30 ) == 0 )
    {
        
        if ( var57 < 20 )
        {
            AI_ACT_SKILL( BattleSkill.SpiritDrainBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var57 < ( 20 + 15 ) )
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }
        else if ( var57 < ( ( 20 + 15 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mudoon );
            AI_TAR_RND();
            return;
        }
        else if ( var57 < ( ( ( 20 + 15 ) + 25 ) + 10 ) )
        {
            
            if ( AI_CHK_SELF_EFFECT( SpecialEffects.Tetrakarn ) == 0 )
            {
                AI_ACT_SKILL( 241 );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 30 ) == 1 )
    {
        
        if ( ( ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackBuff ) == 1 ) || ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseBuff ) == 1 ) ) || ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.HitUpBuff ) == 1 ) )
        {
            AI_ACT_SKILL( BattleSkill.Dekaja );
            AI_TAR_RND();
            return;
        }
        else if ( ( ( AI_CHK_ALLY_EFFECT( SpecialEffects.AttackDebuff ) == 1 ) || ( AI_CHK_ALLY_EFFECT( SpecialEffects.DefenseDebuff ) == 1 ) ) || ( AI_CHK_ALLY_EFFECT( SpecialEffects.HitUpDebuff ) == 1 ) )
        {
            AI_ACT_SKILL( BattleSkill.Dekunda );
            AI_TAR_RND();
            return;
        }
        else if ( var58 < 30 )
        {
            AI_ACT_SKILL( BattleSkill.LifeDrainBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var58 < ( 30 + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mamudo );
            AI_TAR_RND();
            return;
        }
        else if ( var58 < ( ( 30 + 30 ) + 20 ) )
        {
            
            if ( AI_CHK_ALLY_EFFECT( SpecialEffects.AttackBuff ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Tarukaja );
                AI_DONT_TAR_EFFECT( 5 );
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.LifeDrainBoss );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var58 < ( ( ( 30 + 30 ) + 20 ) + 20 ) )
        {
            
            if ( AI_CHK_ALLY_EFFECT( SpecialEffects.DefenseBuff ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Rakukaja );
                AI_DONT_TAR_EFFECT( SpecialEffects.DefenseBuff );
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Mamudo );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 167
void AI_ZENNOU()
{
    int var59;
    int var60;
    var59 = AI_RND( 100 );
    var60 = AI_RND( 100 );
    
    if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Makarakarn ) == 1 )
    {
        
        if ( FUNCTION_0049( 5 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Megidolaon );
            AI_TAR_RND();
            return;
        }
        else if ( FUNCTION_0049( 5 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Maziodyne );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        
        if ( AI_SELF_HP_PERCENT( 30 ) == 0 )
        {
            
            if ( FUNCTION_0159( 1, 5 ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.SpiritDrainBoss );
                AI_TAR_UNIT( BattleUnit.CowardlyMaya );
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Megidola );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var59 < 20 )
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }
        else if ( var59 < ( 20 + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mabufudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var59 < ( ( 20 + 20 ) + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.Maziodyne );
            AI_TAR_RND();
            return;
        }
        else if ( var59 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Megidolaon );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( ( FUNCTION_0162( 1, 9 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( PartyMember.Protagonist, SpecialEffects.Break3 ) == 0 ) )
    {
        
        if ( ( FUNCTION_0160( 1, 3 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 4 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 5 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 6 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
        }

    }

    
    if ( ( FUNCTION_0162( 1, 18 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( PartyMember.Protagonist, SpecialEffects.Break3 ) == 0 ) )
    {
        
        if ( ( FUNCTION_0160( 1, 3 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 4 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 5 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 6 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
        }

    }

    
    if ( ( FUNCTION_0162( 1, 27 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( PartyMember.Protagonist, SpecialEffects.Break3 ) == 0 ) )
    {
        
        if ( ( FUNCTION_0160( 1, 3 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 4 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 5 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 6 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
        }

    }

    
    if ( ( FUNCTION_0162( 1, 36 ) == 1 ) && ( AI_CHK_PLAYER_EFFECT( PartyMember.Protagonist, SpecialEffects.Break3 ) == 0 ) )
    {
        
        if ( ( FUNCTION_0160( 1, 3 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 4 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 5 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
            return;
        }
        else if ( ( FUNCTION_0160( 1, 6 ) == 1 ) && ( FUNCTION_0057( 94 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_UNIT( BattleUnit.CowardlyMaya );
        }

    }

    
    if ( AI_SELF_HP_PERCENT( 50 ) == 0 )
    {
        
        if ( var59 < 20 )
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }
        else if ( var59 < ( 20 + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mabufudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var59 < ( ( 20 + 20 ) + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.Maziodyne );
            AI_TAR_RND();
            return;
        }
        else if ( var59 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Megidola );
            AI_TAR_RND();
            return;
        }

    }
    else if ( ( AI_SELF_HP_PERCENT( 50 ) == 1 ) && ( AI_SELF_HP_PERCENT( 20 ) == 0 ) )
    {
        
        if ( var60 < 25 )
        {
            AI_ACT_SKILL( BattleSkill.Mamudoon );
            AI_TAR_RND();
            return;
        }
        else if ( var60 < ( 25 + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mahamaon );
            AI_TAR_RND();
            return;
        }
        else if ( var60 < ( ( 25 + 25 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Megidola );
            AI_TAR_RND();
            return;
        }
        else if ( var60 < ( ( ( 25 + 25 ) + 25 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Megidolaon );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 20 ) == 1 )
    {
        
        if ( ENWEAK_ST_PAI( 3 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_WEAK( Affinity.Fire );
            return;
        }
        else if ( ENWEAK_ST_PAI( 4 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_WEAK( Affinity.Ice );
            return;
        }
        else if ( ENWEAK_ST_PAI( 6 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_WEAK( Affinity.Wind );
            return;
        }
        else if ( ENWEAK_ST_PAI( 5 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_WEAK( Affinity.Elec );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Megidolaon );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 168
void AI_FUNNU_KAI()
{
    int var61;
    int var62;
    var61 = AI_RND( 100 );
    var62 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

    
    if ( AI_SELF_HP_PERCENT( 20 ) == 0 )
    {
        
        if ( var61 < 20 )
        {
            AI_ACT_SKILL( BattleSkill.PrimalForce );
            AI_TAR_RND();
            return;
        }
        else if ( var61 < ( 20 + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.VorpalBlade );
            AI_TAR_RND();
            return;
        }
        else if ( var61 < ( ( 20 + 20 ) + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.PowerCharge );
            AI_TAR_SELF();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 20 ) == 1 )
    {
        
        if ( var62 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.LastResort );
            AI_TAR_RND();
            return;
        }
        else if ( var62 < ( 50 + 50 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mazionga );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 169
void AI_AIHEK()
{
    int var63;
    var63 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Megidolaon );
        AI_TAR_RND();
        return;
    }

    
    if ( FUNCTION_005E( 20 ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.MindCharge );
        AI_TAR_SELF();
        return;
    }

    
    if ( var63 < 5 )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }
    else if ( var63 < ( 5 + 20 ) )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Fear ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Infuriate );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.PrimalForce );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var63 < ( ( 5 + 20 ) + 15 ) )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AilmentSusceptibility ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.StagnantAir );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( var63 < ( ( ( 5 + 20 ) + 15 ) + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.PrimalForce );
        AI_TAR_RND();
        return;
    }
    else if ( var63 < ( ( ( ( 5 + 20 ) + 15 ) + 25 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.Megidolaon );
        AI_TAR_RND();
        return;
    }
    else if ( var63 < ( ( ( ( ( 5 + 20 ) + 15 ) + 25 ) + 20 ) + 5 ) )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Marakunda );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( var63 < ( ( ( ( ( ( 5 + 20 ) + 15 ) + 25 ) + 20 ) + 5 ) + 5 ) )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.HitUpDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Masukunda );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( var63 < ( ( ( ( ( ( ( 5 + 20 ) + 15 ) + 25 ) + 20 ) + 5 ) + 5 ) + 5 ) )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Matarunda );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.PrimalForce );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 170
void AI_KYOUSIN()
{
    int var64;
    int var65;
    int var66;
    var64 = AI_RND( 100 );
    var65 = AI_RND( 100 );
    var66 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        
        if ( var65 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.Zionga );
            AI_TAR_RND();
            return;
        }
        else if ( var65 < ( 50 + 50 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mazionga );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }

    
    if ( AI_SELF_HP_PERCENT( 30 ) == 1 )
    {
        
        if ( var66 < 20 )
        {
            AI_ACT_SKILL( BattleSkill.Mazionga );
            AI_TAR_RND();
            return;
        }
        else if ( var66 < ( 20 + 20 ) )
        {
            
            if ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Mazionga );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.PoisonMist );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var66 < ( ( 20 + 20 ) + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.MindCharge );
            AI_TAR_SELF();
            return;
        }
        else if ( var66 < ( ( ( 20 + 20 ) + 30 ) + 30 ) )
        {
            
            if ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_REFLECT( Affinity.Elec );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_NULL( Affinity.Elec );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_ABSORB( Affinity.Elec );
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Mazionga );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }
    else if ( var64 < 20 )
    {
        
        if ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.PoisonMist );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mazionga );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var64 < ( 20 + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mazionga );
        AI_TAR_RND();
        return;
    }
    else if ( var64 < ( ( 20 + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.MindCharge );
        AI_TAR_SELF();
        return;
    }
    else if ( var64 < ( ( ( 20 + 20 ) + 20 ) + 30 ) )
    {
        AI_ACT_SKILL( BattleSkill.Zionga );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 171
void AI_MAGS_KAI()
{
    int var67;
    int var68;
    int var69;
    var67 = AI_RND( 100 );
    var68 = AI_RND( 100 );
    var69 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        
        if ( var68 < 45 )
        {
            AI_ACT_SKILL( BattleSkill.Mabufula );
            AI_TAR_RND();
            return;
        }
        else if ( var68 < ( 45 + 15 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var68 < ( ( 45 + 15 ) + 40 ) )
        {
            
            if ( AI_SELF_HP_PERCENT( 30 ) == 1 )
            {
                
                if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_REFLECT( Affinity.Ice );
                    return;
                }
                else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_NULL( Affinity.Ice );
                    return;
                }
                else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_ABSORB( Affinity.Ice );
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.Mabufula );
                    AI_TAR_RND();
                    return;
                }

            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Mabufula );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }

    
    if ( AI_ALLY_COUNT( 1 ) == 0 )
    {
        
        if ( var67 < 35 )
        {
            AI_ACT_SKILL( BattleSkill.Mabufula );
            AI_TAR_RND();
            return;
        }
        else if ( var67 < ( 35 + 5 ) )
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }
        else if ( var67 < ( ( 35 + 5 ) + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.MindCharge );
            AI_TAR_SELF();
            return;
        }
        else if ( var67 < ( ( ( 35 + 5 ) + 20 ) + 20 ) )
        {
            
            if ( AI_CHK_ALLY_EFFECT( SpecialEffects.Makarakarn ) == 0 )
            {
                AI_ACT_SKILL( 242 );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Mabufula );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_ALLY_COUNT( 1 ) == 1 )
    {
        
        if ( var69 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            FUNCTION_0060();
            return;
        }
        else if ( var69 < ( 50 + 50 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mabufula );
            AI_TAR_RND();
            return;
        }
        else if ( var69 < ( ( 50 + 50 ) + 50 ) )
        {
            AI_ACT_SKILL( BattleSkill.MindCharge );
            AI_TAR_SELF();
            return;
        }
        else if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.IceBreak );
            AI_TAR_REFLECT( Affinity.Ice );
            return;
        }
        else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.IceBreak );
            AI_TAR_NULL( Affinity.Ice );
            return;
        }
        else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.IceBreak );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mabufula );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 172
void AI_GRAND_MAGS()
{
    int var70;
    int var71;
    var70 = AI_RND( 100 );
    var71 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        
        if ( var71 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }
        else if ( var71 < ( 50 + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Megidolaon );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( var70 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.Maragidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var70 < ( 20 + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.Agidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var70 < ( ( 20 + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.MindCharge );
        AI_TAR_SELF();
        return;
    }
    else if ( var70 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
    {
        
        if ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Tentarafoo );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var70 < ( ( ( ( 20 + 20 ) + 20 ) + 20 ) + 15 ) )
    {
        AI_ACT_SKILL( BattleSkill.Megidolaon );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 173
void AI_KYOURAN_MALIA()
{
    int var72;
    var72 = AI_RND( 100 );
    
    if ( var72 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.Bufudyne );
        AI_TAR_RND();
        return;
    }
    else if ( var72 < ( 20 + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mabufudyne );
        AI_TAR_RND();
        return;
    }
    else if ( var72 < ( ( 20 + 25 ) + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mudoon );
        AI_TAR_RND();
        return;
    }
    else if ( var72 < ( ( ( 20 + 25 ) + 25 ) + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mamudoon );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 174
void AI_ABYSS_MOTHER()
{
    int var73;
    int var74;
    var73 = AI_RND( 100 );
    var74 = AI_RND( 100 );
    
    if ( AI_CHK_ENEMY_STATUS( StatusEffects.Fear ) == 1 )
    {
        
        if ( var74 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.GhastlyWail );
            AI_TAR_RND();
            return;
        }
        else if ( var74 < ( 50 + 50 ) )
        {
            
            if ( var73 < 25 )
            {
                
                if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Fear ) == 0 )
                {
                    AI_ACT_SKILL( BattleSkill.Infuriate );
                    AI_TAR_RND();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.Mahamaon );
                    AI_TAR_RND();
                    return;
                }

            }
            else if ( var73 < ( 25 + 5 ) )
            {
                AI_ACT_WEAPON();
                AI_TAR_RND();
                return;
            }
            else if ( var73 < ( ( 25 + 5 ) + 25 ) )
            {
                AI_ACT_SKILL( BattleSkill.Mahama );
                AI_TAR_RND();
                return;
            }
            else if ( var73 < ( ( ( 25 + 5 ) + 25 ) + 25 ) )
            {
                AI_ACT_SKILL( BattleSkill.Mahamaon );
                AI_TAR_RND();
                return;
            }
            else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackDebuff ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Matarunda );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Mahamaon );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }
    else if ( var73 < 25 )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Fear ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Infuriate );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mahamaon );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var73 < ( 25 + 5 ) )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }
    else if ( var73 < ( ( 25 + 5 ) + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mahama );
        AI_TAR_RND();
        return;
    }
    else if ( var73 < ( ( ( 25 + 5 ) + 25 ) + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mahamaon );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackDebuff ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.Matarunda );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Mahamaon );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 175
void AI_KING_CATHLE()
{
    int var75;
    int var76;
    var75 = AI_RND( 100 );
    var76 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        
        if ( var76 < 50 )
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.GodsHand );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( var75 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.PowerCharge );
        AI_TAR_SELF();
        return;
    }
    else if ( var75 < ( 20 + 10 ) )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Poison ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.PoisonMist );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Maziodyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var75 < ( ( 20 + 10 ) + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.GodsHand );
        AI_TAR_RND();
        return;
    }
    else if ( var75 < ( ( ( 20 + 10 ) + 25 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.Maziodyne );
        AI_TAR_RND();
        return;
    }
    else if ( var75 < ( ( ( ( 20 + 10 ) + 25 ) + 20 ) + 10 ) )
    {
        AI_ACT_SKILL( BattleSkill.Ziodyne );
        AI_TAR_RND();
        return;
    }
    else if ( var75 < ( ( ( ( ( 20 + 10 ) + 25 ) + 20 ) + 10 ) + 10 ) )
    {
        
        if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.ElecBreak );
            AI_TAR_ABSORB( Affinity.Elec );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 176
void AI_WHITE_SIJIL()
{
    int var77;
    int var78;
    var77 = AI_RND( 100 );
    var78 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        
        if ( var78 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.Mabufudyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Megidolaon );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( var77 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.Megidolaon );
        AI_TAR_RND();
        return;
    }
    else if ( var77 < ( 20 + 30 ) )
    {
        AI_ACT_SKILL( BattleSkill.MindCharge );
        AI_TAR_SELF();
        return;
    }
    else if ( var77 < ( ( 20 + 30 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mamudoon );
        AI_TAR_RND();
        return;
    }
    else if ( var77 < ( ( ( 20 + 30 ) + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.VirusBreath );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 177
void AI_INYOKU_HEBI()
{
    int var79;
    int var80;
    int var81;
    int var82;
    var79 = AI_RND( 100 );
    var80 = AI_RND( 100 );
    var81 = AI_RND( 100 );
    var82 = AI_RND( 100 );
    
    if ( AI_ALLY_COUNT( 1 ) == 1 )
    {
        
        if ( var80 < 30 )
        {
            FUNCTION_0074( 88 );
            AI_TAR_RND();
            return;
        }
        else if ( var80 < ( 30 + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }
        else if ( var80 < ( ( 30 + 25 ) + 15 ) )
        {
            AI_ACT_SKILL( BattleSkill.SexyDance );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mahamaon );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( FUNCTION_0035( 15 ) == 1 )
    {
        
        if ( var81 < 40 )
        {
            AI_ACT_SKILL( BattleSkill.Diarama );
            FUNCTION_0060();
            return;
        }
        else if ( var81 < ( 40 + 40 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mediarahan );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_CHK_ALLIES_STATUS( StatusEffects.Downed ) == 1 )
    {
        
        if ( var82 < 60 )
        {
            AI_ACT_SKILL( BattleSkill.RePatra );
            AI_TAR_STATUS( StatusEffects.Downed );
            return;
        }
        else if ( var82 < ( 60 + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mahama );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( var79 < 25 )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Charm ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.SexyDance );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var79 < ( 25 + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.Agidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var79 < ( ( 25 + 25 ) + 25 ) )
    {
        
        if ( AI_ALLY_COUNT( 1 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.VirusBreath );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Mahama );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 178
void AI_OMEGA_TANK()
{
    int var83;
    int var84;
    var83 = AI_RND( 100 );
    var84 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        
        if ( var84 < 30 )
        {
            AI_ACT_SKILL( BattleSkill.VileAssault );
            AI_TAR_RND();
            return;
        }
        else if ( var84 < ( 30 + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.PrimalForce );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }

    
    if ( var83 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.PowerCharge );
        AI_TAR_SELF();
        return;
    }
    else if ( var83 < ( 20 + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.VileAssault );
        AI_TAR_RND();
        return;
    }
    else if ( var83 < ( ( 20 + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.PrimalForce );
        AI_TAR_RND();
        return;
    }
    else if ( var83 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Marakunda );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 179
void AI_LAST_SAMRAI()
{
    int var85;
    int var86;
    var85 = AI_RND( 100 );
    var86 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        
        if ( var86 < 30 )
        {
            AI_ACT_SKILL( BattleSkill.VorpalBlade );
            AI_TAR_RND();
            return;
        }
        else if ( var86 < ( 30 + 40 ) )
        {
            AI_ACT_SKILL( BattleSkill.MyriadArrows );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }

    
    if ( var85 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.VorpalBlade );
        AI_TAR_RND();
        return;
    }
    else if ( var85 < ( 20 + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.PowerCharge );
        AI_TAR_SELF();
        return;
    }
    else if ( var85 < ( ( 20 + 20 ) + 20 ) )
    {
        
        if ( AI_CHK_ALLY_EFFECT( SpecialEffects.AttackBuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Matarukaja );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( var85 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.MyriadArrows );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 180
void AI_AKERON_SERCH()
{
    int var87;
    var87 = AI_RND( 100 );
    
    if ( var87 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.Maragidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var87 < ( 20 + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mabufudyne );
        AI_TAR_RND();
        return;
    }
    else if ( var87 < ( ( 20 + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.Maziodyne );
        AI_TAR_RND();
        return;
    }
    else if ( var87 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.Magarudyne );
        AI_TAR_RND();
        return;
    }
    else if ( var87 < ( ( ( ( 20 + 20 ) + 20 ) + 20 ) + 10 ) )
    {
        
        if ( ( AI_CHK_SELF_EFFECT( SpecialEffects.Tetrakarn ) == 1 ) || ( AI_CHK_ALLY_EFFECT( SpecialEffects.Tetrakarn ) == 1 ) )
        {
            AI_ACT_SKILL( BattleSkill.Infuriate );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( 241 );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var87 < ( ( ( ( ( 20 + 20 ) + 20 ) + 20 ) + 10 ) + 10 ) )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.Tetrakarn ) == 0 )
        {
            AI_ACT_SKILL( 241 );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Infuriate );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 181
void AI_EIEN_TOKEI()
{
    int var88;
    var88 = AI_RND( 100 );
    
    if ( var88 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.Magarudyne );
        AI_TAR_RND();
        return;
    }
    else if ( var88 < ( 20 + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.Garudyne );
        AI_TAR_RND();
        return;
    }
    else if ( var88 < ( ( 20 + 20 ) + 20 ) )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.HitUpDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Masukunda );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var88 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
    {
        
        if ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.WindBreak );
            AI_TAR_ABSORB( Affinity.Wind );
            return;
        }
        else if ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.WindBreak );
            AI_TAR_REFLECT( Affinity.Wind );
            return;
        }
        else if ( AI_EN_HAS_NULL( Affinity.Wind ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.WindBreak );
            AI_TAR_NULL( Affinity.Wind );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var88 < ( ( ( ( 20 + 20 ) + 20 ) + 20 ) + 20 ) )
    {
        
        if ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Despair ) == 0 ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.EerieSound );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var88 < ( ( ( ( ( 20 + 20 ) + 20 ) + 20 ) + 20 ) + 20 ) )
    {
        
        if ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Despair ) == 0 ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Tentarafoo );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 182
void AI_MU_KYOJIN()
{
    int var89;
    var89 = AI_RND( 100 );
    
    if ( var89 < 10 )
    {
        AI_ACT_SKILL( BattleSkill.Mahamaon );
        AI_TAR_RND();
        return;
    }
    else if ( var89 < ( 10 + 10 ) )
    {
        AI_ACT_SKILL( BattleSkill.Hamaon );
        AI_TAR_RND();
        return;
    }
    else if ( var89 < ( ( 10 + 10 ) + 10 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mamudoon );
        AI_TAR_RND();
        return;
    }
    else if ( var89 < ( ( ( 10 + 10 ) + 10 ) + 10 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mudoon );
        AI_TAR_RND();
        return;
    }
    else if ( var89 < ( ( ( ( 10 + 10 ) + 10 ) + 10 ) + 10 ) )
    {
        AI_ACT_SKILL( BattleSkill.MyriadArrows );
        AI_TAR_RND();
        return;
    }
    else if ( var89 < ( ( ( ( ( 10 + 10 ) + 10 ) + 10 ) + 10 ) + 10 ) )
    {
        AI_ACT_SKILL( BattleSkill.Deathbound );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 183
void AI_KONTON_KYUKURO()
{
    int var90;
    int var91;
    var90 = AI_RND( 100 );
    var91 = AI_RND( 100 );
    
    if ( AI_SELF_HP_PERCENT( 15 ) == 1 )
    {
        
        if ( var91 < 20 )
        {
            AI_ACT_SKILL( BattleSkill.Diarahan );
            AI_TAR_SELF();
            return;
        }
        else if ( var91 < ( 20 + 40 ) )
        {
            AI_ACT_SKILL( BattleSkill.Megidolaon );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.PrimalForce );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( var90 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.Bufudyne );
        AI_TAR_RND();
        return;
    }
    else if ( var90 < ( 20 + 20 ) )
    {
        
        if ( AI_CHK_ALLY_EFFECT( SpecialEffects.DefenseBuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Marakukaja );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mabufudyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var90 < ( ( 20 + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.GodsHand );
        AI_TAR_RND();
        return;
    }
    else if ( var90 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Infuriate );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 184
void AI_HONSYO_AEGIS()
{
    int var92;
    var92 = AI_RND( 100 );
    
    if ( AI_CHK_UNIT_PRESENT( BattleUnit.SteelGigas ) == 1 )
    {
        
        if ( FUNCTION_00AB( 122, 1 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Tarukaja );
            AI_TAR_UNIT( BattleUnit.SteelGigas );
            return;
        }
        else if ( FUNCTION_00AB( 122, 0x40 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Rakukaja );
            AI_TAR_UNIT( BattleUnit.SteelGigas );
            return;
        }
        else if ( FUNCTION_00AB( 122, 0x10 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Sukukaja );
            AI_TAR_UNIT( BattleUnit.SteelGigas );
            return;
        }
        else if ( ( ( FUNCTION_00AB( 122, 2 ) == 1 ) || ( FUNCTION_00AB( 122, 0x80 ) == 1 ) ) || ( FUNCTION_00AB( 122, 0x20 ) == 1 ) )
        {
            AI_ACT_SKILL( BattleSkill.Dekunda );
            AI_TAR_UNIT( BattleUnit.SteelGigas );
            return;
        }

        
        if ( AI_CHK_UNIT_STATUS( 122, StatusEffects.Downed ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.RePatra );
            AI_TAR_UNIT( BattleUnit.SteelGigas );
            return;
        }
        else if ( var92 < 34 )
        {
            AI_ACT_SKILL( BattleSkill.Bash );
            AI_TAR_RND();
            return;
        }
        else if ( var92 < ( 34 + 33 ) )
        {
            AI_ACT_SKILL( BattleSkill.Cleave );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.DoubleFangs );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var92 < 34 )
    {
        AI_ACT_SKILL( BattleSkill.Bash );
        AI_TAR_RND();
        return;
    }
    else if ( var92 < ( 34 + 33 ) )
    {
        AI_ACT_SKILL( BattleSkill.Cleave );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.DoubleFangs );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 185
void AI_GOUWAN_AEGIS()
{
    int var93;
    int var94;
    var93 = AI_RND( 100 );
    var94 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    
    if ( AI_SELF_HP_PERCENT( 80 ) == 0 )
    {
        
        if ( var93 < 10 )
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }
        else if ( var93 < ( 10 + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufula );
            AI_TAR_WEAK( Affinity.Ice );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mabufula );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 60 ) == 1 )
    {
        
        if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) ) == 0 )
        {
            FUNCTION_0074( 320 );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) );
            return;
        }
        else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 )
        {
            FUNCTION_0074( 320 );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) );
            return;
        }
        else if ( var94 < 34 )
        {
            AI_ACT_SKILL( BattleSkill.KillRush );
            AI_TAR_RND();
            return;
        }
        else if ( var94 < ( 34 + 33 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_WEAK( Affinity.Ice );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mabufula );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 80 ) == 1 )
    {
        
        if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 )
        {
            FUNCTION_0074( 320 );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) );
            return;
        }
        else if ( var94 < 34 )
        {
            AI_ACT_SKILL( BattleSkill.KillRush );
            AI_TAR_RND();
            return;
        }
        else if ( var94 < ( 34 + 33 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_WEAK( Affinity.Ice );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mabufula );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 186
void AI_CATHLE_AEGIS()
{
    int var95;
    var95 = AI_RND( 100 );
    
    if ( ( FUNCTION_0035( 25 ) == 1 ) && ( AI_ALLY_COUNT( 1 ) == 0 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mediarama );
        AI_TAR_RND();
        return;
    }

    
    if ( AI_CHK_UNIT_STATUS( 325, StatusEffects.Panic ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Patra );
        AI_TAR_STATUS( StatusEffects.Panic );
        return;
    }

    
    if ( AI_CHK_UNIT_STATUS( 325, StatusEffects.Downed ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.RePatra );
        AI_TAR_STATUS( StatusEffects.Downed );
        return;
    }

    
    if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_REFLECT( Affinity.Fire );
        return;
    }
    else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_NULL( Affinity.Fire );
        return;
    }
    else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_ABSORB( Affinity.Fire );
        return;
    }

    
    if ( var95 < 30 )
    {
        AI_ACT_SKILL( BattleSkill.Mazionga );
        AI_TAR_RND();
        return;
    }
    else if ( var95 < ( 30 + 20 ) )
    {
        
        if ( AI_CHK_ALLY_EFFECT( SpecialEffects.HitUpBuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Masukukaja );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mazionga );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var95 < ( ( 30 + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.Zionga );
        AI_TAR_RND();
        return;
    }
    else if ( var95 < ( ( ( 30 + 20 ) + 20 ) + 5 ) )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }
    else if ( FUNCTION_0056( 4 ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Tentarafoo );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Pulinpa );
        AI_DONT_TAR_STATUS( StatusEffects.Panic );
        return;
    }

}


// Procedure Index: 187
void AI_SLAVE_AEGIS()
{
    int var96;
    var96 = AI_RND( 100 );
    
    if ( var96 < 30 )
    {
        AI_ACT_SKILL( BattleSkill.Agilao );
        AI_TAR_RND();
        return;
    }
    else if ( var96 < ( 30 + 30 ) )
    {
        
        if ( FUNCTION_0058( 115 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.SwiftStrike );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.KillRush );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var96 < ( ( 30 + 30 ) + 30 ) )
    {
        AI_ACT_SKILL( BattleSkill.KillRush );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 188
void AI_ROYAL_AEGIS()
{
    int var97;
    int var98;
    var97 = AI_RND( 100 );
    var97 = AI_RND( 100 );
    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        AI_ACT_SKILL( BattleSkill.HeatWave );
        AI_TAR_RND();
        return;
    }

    
    if ( AI_CHK_ENEMY_STATUS( StatusEffects.Despair ) == 1 )
    {
        AI_ACT_SKILL( 157 );
        AI_TAR_RND();
        return;
    }

    var98 = 0;
    
    if ( AI_SELF_HP_PERCENT( 20 ) == 0 )
    {
        
        if ( var97 < 30 )
        {
            AI_ACT_SKILL( 157 );
            AI_TAR_RND();
            return;
        }
        else if ( var97 < ( 30 + 30 ) )
        {
            
            if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Charm ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.MarinKarin );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( 157 );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var97 < ( ( 30 + 30 ) + 20 ) )
        {
            
            if ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.PoisonMist );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( 157 );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Maragion );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var98 < 35 )
    {
        AI_ACT_SKILL( 157 );
        AI_TAR_RND();
        return;
    }
    else if ( var98 < ( 35 + 15 ) )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Charm ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.MarinKarin );
            AI_DONT_TAR_STATUS( StatusEffects.Charm );
            return;
        }
        else 
        {
            AI_ACT_SKILL( 157 );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var98 < ( ( 35 + 15 ) + 15 ) )
    {
        
        if ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.PoisonMist );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( 157 );
            AI_TAR_RND();
            return;
        }

    }
    else if ( FUNCTION_0053( 3 ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Agidyne );
        AI_TAR_WEAK( Affinity.Fire );
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Maragion );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 189
void AI_ZANKOKU_AEGIS()
{
    int var99;
    int var100;
    int var101;
    var99 = AI_RND( 100 );
    var100 = AI_RND( 100 );
    var101 = AI_RND( 100 );
    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Agilao );
        STAND();
        return;
    }

    
    if ( var99 < 35 )
    {
        
        if ( FUNCTION_0053( 3 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Agilao );
            AI_TAR_WEAK( Affinity.Fire );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Agilao );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var99 < ( 35 + 30 ) )
    {
        AI_ACT_SKILL( BattleSkill.VirusBreath );
        AI_TAR_RND();
        return;
    }
    else if ( var99 < ( ( 35 + 30 ) + 20 ) )
    {
        
        if ( AI_CHK_ENEMY_STATUS( StatusEffects.Despair ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.EerieSound );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Agilao );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_CHK_ALLY_EFFECT( SpecialEffects.Makarakarn ) == 0 )
    {
        AI_ACT_SKILL( 242 );
        AI_TAR_RND();
        return;
    }
    else if ( FUNCTION_0053( 3 ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Agilao );
        AI_TAR_WEAK( Affinity.Fire );
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Agilao );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 190
void AI_BRAVE_AEGIS()
{
    int var102;
    int var103;
    var102 = AI_RND( 100 );
    var103 = AI_RND( 100 );
    
    if ( AI_ALLY_COUNT( 1 ) == 0 )
    {
        
        if ( var102 < 35 )
        {
            AI_ACT_SKILL( BattleSkill.Agilao );
            AI_TAR_RND();
            return;
        }
        else if ( var102 < ( 35 + 35 ) )
        {
            AI_ACT_SKILL( BattleSkill.Maragion );
            AI_TAR_RND();
            return;
        }
        else if ( var102 < ( ( 35 + 35 ) + 15 ) )
        {
            
            if ( AI_CHK_UNIT_PRESENT( BattleUnit.JudgementSword ) == 1 )
            {
                
                if ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.ElecBreak );
                    AI_TAR_REFLECT( Affinity.Elec );
                    return;
                }
                else if ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.ElecBreak );
                    AI_TAR_NULL( Affinity.Elec );
                    return;
                }
                else if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.ElecBreak );
                    AI_TAR_ABSORB( Affinity.Elec );
                    return;
                }
                else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackDebuff ) == 0 )
                {
                    AI_ACT_SKILL( BattleSkill.Matarunda );
                    AI_TAR_RND();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.Agilao );
                    AI_TAR_RND();
                    return;
                }

            }
            else if ( AI_CHK_UNIT_PRESENT( BattleUnit.IceRaven ) == 1 )
            {
                
                if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_REFLECT( Affinity.Ice );
                    return;
                }
                else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_NULL( Affinity.Ice );
                    return;
                }
                else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_ABSORB( Affinity.Ice );
                    return;
                }
                else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackDebuff ) == 0 )
                {
                    AI_ACT_SKILL( BattleSkill.Matarunda );
                    AI_TAR_RND();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.Agilao );
                    AI_TAR_RND();
                    return;
                }

            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Megidolaon );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_ALLY_COUNT( 1 ) == 1 )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Maragion );
            AI_TAR_RND();
            return;
        }
        else if ( var103 < 30 )
        {
            AI_ACT_SKILL( BattleSkill.Agilao );
            AI_TAR_RND();
            return;
        }
        else if ( var103 < ( 30 + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.Maragion );
            AI_TAR_RND();
            return;
        }
        else if ( var103 < ( ( 30 + 30 ) + 20 ) )
        {
            
            if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.FireBreak );
                AI_TAR_REFLECT( Affinity.Fire );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.FireBreak );
                AI_TAR_NULL( Affinity.Fire );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.FireBreak );
                AI_TAR_ABSORB( Affinity.Fire );
                return;
            }
            else if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }
            else 
            {
                AI_ACT_SKILL( 156 );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_SKILL( 156 );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 191
void AI_HANKETU_AEGIS()
{
    int var104;
    int var105;
    var104 = AI_RND( 100 );
    var105 = AI_RND( 100 );
    
    if ( AI_ALLY_COUNT( 1 ) == 0 )
    {
        
        if ( var104 < 35 )
        {
            AI_ACT_SKILL( BattleSkill.Zionga );
            AI_TAR_RND();
            return;
        }
        else if ( var104 < ( 35 + 35 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mazionga );
            AI_TAR_RND();
            return;
        }
        else if ( var104 < ( ( 35 + 35 ) + 15 ) )
        {
            
            if ( AI_CHK_UNIT_PRESENT( BattleUnit.BraveWheel ) == 1 )
            {
                
                if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.FireBreak );
                    AI_TAR_REFLECT( 229 );
                    return;
                }
                else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.FireBreak );
                    AI_TAR_NULL( Affinity.Fire );
                    return;
                }
                else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.FireBreak );
                    AI_TAR_ABSORB( Affinity.Fire );
                    return;
                }
                else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
                {
                    AI_ACT_SKILL( BattleSkill.Marakunda );
                    AI_TAR_RND();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.Zionga );
                    AI_TAR_RND();
                    return;
                }

            }
            else if ( AI_CHK_UNIT_PRESENT( BattleUnit.IceRaven ) == 1 )
            {
                
                if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_REFLECT( Affinity.Ice );
                    return;
                }
                else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_NULL( Affinity.Ice );
                    return;
                }
                else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_ABSORB( Affinity.Ice );
                    return;
                }
                else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
                {
                    AI_ACT_SKILL( BattleSkill.Marakunda );
                    AI_TAR_RND();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.Zionga );
                    AI_TAR_RND();
                    return;
                }

            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Megidolaon );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_ALLY_COUNT( 1 ) == 1 )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Mazionga );
            AI_TAR_RND();
            return;
        }
        else if ( var105 < 30 )
        {
            AI_ACT_SKILL( BattleSkill.Zionga );
            AI_TAR_RND();
            return;
        }
        else if ( var105 < ( 30 + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mazionga );
            AI_TAR_RND();
            return;
        }
        else if ( var105 < ( ( 30 + 30 ) + 20 ) )
        {
            
            if ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_REFLECT( Affinity.Elec );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_NULL( Affinity.Elec );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.ElecBreak );
                AI_TAR_ABSORB( Affinity.Elec );
                return;
            }
            else if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }
            else 
            {
                AI_ACT_SKILL( 155 );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_SKILL( 155 );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 192
void AI_ICE_AEGIS()
{
    int var106;
    int var107;
    var106 = AI_RND( 100 );
    var107 = AI_RND( 100 );
    
    if ( AI_ALLY_COUNT( 1 ) == 0 )
    {
        
        if ( var106 < 25 )
        {
            AI_ACT_SKILL( BattleSkill.Bufula );
            AI_TAR_RND();
            return;
        }
        else if ( var106 < ( 25 + 35 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mabufula );
            AI_TAR_RND();
            return;
        }
        else if ( var106 < ( ( 25 + 35 ) + 15 ) )
        {
            
            if ( AI_CHK_UNIT_PRESENT( BattleUnit.BraveWheel ) == 1 )
            {
                
                if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.FireBreak );
                    AI_TAR_REFLECT( 229 );
                    return;
                }
                else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.FireBreak );
                    AI_TAR_NULL( Affinity.Fire );
                    return;
                }
                else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.FireBreak );
                    AI_TAR_ABSORB( Affinity.Fire );
                    return;
                }
                else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.HitUpDebuff ) == 0 )
                {
                    AI_ACT_SKILL( BattleSkill.Masukunda );
                    AI_TAR_RND();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.Bufula );
                    AI_TAR_RND();
                    return;
                }

            }
            else if ( AI_CHK_UNIT_PRESENT( BattleUnit.JudgementSword ) == 1 )
            {
                
                if ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.ElecBreak );
                    AI_TAR_REFLECT( Affinity.Elec );
                    return;
                }
                else if ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.ElecBreak );
                    AI_TAR_NULL( Affinity.Elec );
                    return;
                }
                else if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.ElecBreak );
                    AI_TAR_ABSORB( Affinity.Elec );
                    return;
                }
                else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.HitUpDebuff ) == 0 )
                {
                    AI_ACT_SKILL( BattleSkill.Masukunda );
                    AI_TAR_RND();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.Bufula );
                    AI_TAR_RND();
                    return;
                }

            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Megidolaon );
                AI_TAR_RND();
                return;
            }

        }
        else if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Panic ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Tentarafoo );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Bufula );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_ALLY_COUNT( 1 ) == 1 )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.GaleSlash );
            AI_TAR_RND();
            return;
        }
        else if ( var107 < 30 )
        {
            AI_ACT_SKILL( BattleSkill.Bufula );
            AI_TAR_RND();
            return;
        }
        else if ( var107 < ( 30 + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mabufula );
            AI_TAR_RND();
            return;
        }
        else if ( var107 < ( ( 30 + 30 ) + 20 ) )
        {
            
            if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_REFLECT( Affinity.Ice );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_NULL( Affinity.Ice );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_ABSORB( Affinity.Ice );
                return;
            }
            else if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.PowerCharge );
                AI_TAR_SELF();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.GaleSlash );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.GaleSlash );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 193
void AI_HAKAI_AEGIS()
{
    int var108;
    int var109;
    int var110;
    var108 = AI_RND( 100 );
    var109 = AI_RND( 100 );
    var110 = AI_RND( 100 );
    
    if ( ( AI_ALLY_COUNT( 1 ) == 0 ) || ( AI_SELF_HP_PERCENT( 30 ) == 0 ) )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Mabufula );
            AI_TAR_RND();
            return;
        }
        else if ( var108 < 25 )
        {
            
            if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Mabufudyne );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var108 < ( 25 + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mabufudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var108 < ( ( 25 + 25 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Megido );
            AI_TAR_RND();
            return;
        }

    }
    else if ( ( AI_ALLY_COUNT( 1 ) == 1 ) || ( AI_SELF_HP_PERCENT( 30 ) == 1 ) )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
        {
            
            if ( var109 < 30 )
            {
                AI_ACT_SKILL( BattleSkill.Mabufudyne );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Megido );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var110 < 25 )
        {
            
            if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Megido );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var110 < ( 25 + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mabufudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var110 < ( ( 25 + 25 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Hamaon );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Megido );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 194
void AI_IKARI_AEGIS()
{
    
    if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AilmentSusceptibility ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.StagnantAir );
        AI_TAR_RND();
        return;
    }

    
    if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AilmentSusceptibility ) == 1 )
    {
        
        if ( AI_CHK_ENEMY_STATUS( StatusEffects.Rage ) == 1 )
        {
            AI_ACT_WEAPON();
            AI_TAR_STATUS( StatusEffects.Rage );
            return;
        }
        else if ( AI_CHK_ENEMY_STATUS( StatusEffects.Rage ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Infuriate );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.HitUpDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Masukunda );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Matarunda );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Marakunda );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 195
void AI_SAKEBU_AEGIS()
{
    
    if ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Rage ) == 1 ) && ( AI_CHK_ALLY_EFFECT( SpecialEffects.Tetrakarn ) == 0 ) )
    {
        AI_ACT_SKILL( 241 );
        AI_TAR_RND();
        return;
    }
    else if ( FUNCTION_0035( 20 ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Media );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_ALLY_EFFECT( SpecialEffects.HitUpBuff ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.Masukukaja );
        AI_TAR_RND();
        return;
    }
    else if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.IceBreak );
        AI_TAR_REFLECT( Affinity.Ice );
        return;
    }
    else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.IceBreak );
        AI_TAR_NULL( Affinity.Ice );
        return;
    }
    else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.IceBreak );
        AI_TAR_ABSORB( Affinity.Ice );
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 196
void AI_WANDA_AEGIS()
{
    int var111;
    int var112;
    int var113;
    var111 = AI_RND( 100 );
    var112 = AI_RND( 100 );
    var113 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        
        if ( ( var112 < 50 ) && ( FUNCTION_0053( 6 ) == 1 ) )
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_WEAK( Affinity.Wind );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_ALLY_COUNT( 1 ) == 0 )
    {
        
        if ( var111 < 25 )
        {
            
            if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Panic ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Tentarafoo );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Bufudyne );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var111 < ( 25 + 25 ) )
        {
            
            if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Mabufula );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var111 < ( ( 25 + 25 ) + 20 ) )
        {
            
            if ( FUNCTION_0057( 12 ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Agidyne );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Garudyne );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var111 < ( ( ( 25 + 25 ) + 20 ) + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.Maziodyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_ALLY_COUNT( 1 ) == 1 )
    {
        
        if ( var113 < 20 )
        {
            
            if ( ( FUNCTION_0057( 62 ) == 0 ) && ( AI_CHK_ENEMIES_STATUS( StatusEffects.Panic ) == 0 ) )
            {
                AI_ACT_SKILL( BattleSkill.Tentarafoo );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_SELF();
                return;
            }

        }
        else if ( var113 < ( 20 + 20 ) )
        {
            
            if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Marakunda );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Mabufudyne );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var113 < ( ( 20 + 20 ) + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mabufudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var113 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.MindCharge );
            AI_TAR_SELF();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 197
void AI_OKUBYOU_AEGIS()
{
    int var114;
    var114 = AI_RND( 100 );
    
    if ( AI_CHK_ENEMY_STATUS( StatusEffects.Fear ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.GhastlyWail );
        AI_TAR_RND();
        return;
    }

    
    if ( AI_CHK_ALLIES_STATUS( StatusEffects.Downed ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.RePatra );
        AI_TAR_STATUS( StatusEffects.Downed );
        return;
    }

    
    if ( var114 < 20 )
    {
        
        if ( ( ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackBuff ) == 1 ) || ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseBuff ) == 1 ) ) || ( ( AI_CHK_ENEMIES_EFFECT( 216 ) == 1 ) && ( AI_ALLY_COUNT( 1 ) == 0 ) ) )
        {
            AI_ACT_SKILL( BattleSkill.Dekaja );
            AI_TAR_RND();
            return;
        }
        else if ( FUNCTION_0053( 4 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Bufula );
            AI_TAR_WEAK( Affinity.Ice );
            return;
        }
        else if ( AI_CHK_ALLIES_STATUS( StatusEffects.Panic ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Patra );
            AI_TAR_STATUS( StatusEffects.Panic );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Bufula );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var114 < ( 20 + 20 ) )
    {
        
        if ( ( ( AI_CHK_ALLY_EFFECT( SpecialEffects.AttackDebuff ) == 1 ) || ( AI_CHK_ALLY_EFFECT( SpecialEffects.DefenseDebuff ) == 1 ) ) || ( ( AI_CHK_ALLY_EFFECT( SpecialEffects.HitUpDebuff ) == 1 ) && ( AI_ALLY_COUNT( 1 ) == 0 ) ) )
        {
            AI_ACT_SKILL( BattleSkill.Dekunda );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.TwinShot );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var114 < ( ( 20 + 20 ) + 20 ) )
    {
        
        if ( FUNCTION_0053( 4 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Bufula );
            AI_TAR_WEAK( Affinity.Ice );
            return;
        }
        else if ( AI_CHK_ALLIES_STATUS( StatusEffects.Panic ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Patra );
            AI_TAR_STATUS( StatusEffects.Panic );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Bufula );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var114 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.TwinShot );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_UNIT_PRESENT( BattleUnit.CryingTable ) == 1 )
    {
        
        if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.FireBreak );
            AI_TAR_REFLECT( Affinity.Fire );
            return;
        }
        else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.FireBreak );
            AI_TAR_NULL( Affinity.Fire );
            return;
        }
        else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.FireBreak );
            AI_TAR_ABSORB( Affinity.Fire );
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.TwinShot );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 198
void AI_NAKU_AEGIS()
{
    int var115;
    var115 = AI_RND( 100 );
    
    if ( ( AI_CHK_ALLIES_STATUS( StatusEffects.Downed ) == 1 ) && ( AI_CHK_ALLY_EFFECT( SpecialEffects.Makarakarn ) == 0 ) )
    {
        AI_ACT_SKILL( 242 );
        AI_TAR_RND();
        return;
    }

    
    if ( var115 < 25 )
    {
        AI_ACT_SKILL( BattleSkill.Agidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var115 < ( 25 + 30 ) )
    {
        AI_ACT_SKILL( BattleSkill.Maragion );
        AI_TAR_RND();
        return;
    }
    else if ( var115 < ( ( 25 + 30 ) + 25 ) )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Fear ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.EvilSmile );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var115 < ( ( ( 25 + 30 ) + 25 ) + 10 ) )
    {
        AI_ACT_SKILL( BattleSkill.LifeDrainBoss );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.SpiritDrainBoss );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 199
void AI_KYOUKI_AEGIS()
{
    int var116;
    int var117;
    var116 = AI_RND( 100 );
    var117 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    
    if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Tetrakarn ) == 1 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 1 )
    {
        
        if ( FUNCTION_0057( 119 ) == 1 )
        {
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) );
        }

    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.LifeDrainBoss );
        AI_TAR_RND();
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) );
        return;
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    
    if ( AI_CHK_ENEMIES_EFFECT( 225 ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Magarudyne );
        AI_TAR_RND();
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) );
        return;
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.SpiritDrainBoss );
        AI_TAR_RND();
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) );
        return;
    }

    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.ViciousStrike );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        
        if ( FUNCTION_0053( 6 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_WEAK( Affinity.Wind );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( var116 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.Magarudyne );
        AI_TAR_RND();
        return;
    }
    else if ( var116 < ( 20 + 20 ) )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Marakunda );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.ViciousStrike );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var116 < ( ( 20 + 20 ) + 20 ) )
    {
        
        if ( var117 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.PowerCharge );
            AI_TAR_SELF();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.MindCharge );
            AI_TAR_SELF();
            return;
        }

    }
    else if ( var116 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.AkashaArts );
        AI_TAR_RND();
        return;
    }
    else if ( var116 < ( ( ( ( 20 + 20 ) + 20 ) + 20 ) + 10 ) )
    {
        
        if ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.WindBreak );
            AI_TAR_REFLECT( Affinity.Wind );
            return;
        }
        else if ( AI_EN_HAS_NULL( Affinity.Wind ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.WindBreak );
            AI_TAR_NULL( Affinity.Wind );
            return;
        }
        else if ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.WindBreak );
            AI_TAR_ABSORB( Affinity.Wind );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.ViciousStrike );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_CHK_SELF_EFFECT( SpecialEffects.Revolution ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.Revolution );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 200
void AI_KYOEIM_AEGIS()
{
    int var119;
    int var120;
    int var121;
    int var122;
    int var118;
    int var123;
    int var124;
    var119 = 0;
    var120 = 0;
    var121 = 0;
    var122 = 0;
    var118 = AI_RND( 100 );
    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        AI_ACT_SKILL( BattleSkill.CruelAttack );
        AI_TAR_STATUS( StatusEffects.Downed );
        return;
    }

    var123 = 0;
    
    if ( FUNCTION_0053( 3 ) == 1 )
    {
        var123 = ( var123 + 1 );
        var119 = ( var119 + var123 );
    }

    
    if ( FUNCTION_0053( 4 ) == 1 )
    {
        var123 = ( var123 + 1 );
        var120 = ( var120 + var123 );
    }

    
    if ( FUNCTION_0053( 5 ) == 1 )
    {
        var123 = ( var123 + 1 );
        var121 = ( var121 + var123 );
    }

    
    if ( FUNCTION_0053( 6 ) == 1 )
    {
        var123 = ( var123 + 1 );
        var122 = ( var122 + var123 );
    }

    var124 = ( AI_RND( var123 ) + 1 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    
    if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 0 ) || ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 ) )
    {
        
        if ( AI_SELF_HP_PERCENT( 70 ) == 0 )
        {
            
            if ( ( ( ( FUNCTION_0053( 3 ) == 1 ) || ( FUNCTION_0053( 4 ) == 1 ) ) || ( FUNCTION_0053( 5 ) == 1 ) ) || ( FUNCTION_0053( 6 ) == 1 ) )
            {
                
                if ( var123 == var119 )
                {
                    AI_ACT_SKILL( BattleSkill.Agi );
                    AI_TAR_WEAK( Affinity.Fire );
                    return;
                }
                else if ( var123 == var120 )
                {
                    AI_ACT_SKILL( BattleSkill.Bufu );
                    AI_TAR_WEAK( Affinity.Ice );
                    return;
                }
                else if ( var123 == var121 )
                {
                    AI_ACT_SKILL( BattleSkill.Zio );
                    AI_TAR_WEAK( Affinity.Elec );
                    return;
                }
                else if ( var123 == var122 )
                {
                    AI_ACT_SKILL( BattleSkill.Garu );
                    AI_TAR_WEAK( Affinity.Wind );
                    return;
                }

            }
            else if ( var118 < 25 )
            {
                AI_ACT_SKILL( BattleSkill.Agi );
                AI_TAR_RND();
                return;
            }
            else if ( var118 < ( 25 + 25 ) )
            {
                AI_ACT_SKILL( BattleSkill.Bufu );
                AI_TAR_RND();
                return;
            }
            else if ( var118 < ( ( 25 + 25 ) + 25 ) )
            {
                AI_ACT_SKILL( BattleSkill.Zio );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Garu );
                AI_TAR_RND();
                return;
            }

        }
        else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 0 )
        {
            FUNCTION_0074( 186 );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
            return;
        }
        else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 )
        {
            FUNCTION_0074( 186 );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) );
            return;
        }
        else 
        {
            AI_ACT_WAIT();
            return;
        }

    }
    else if ( AI_ALLY_COUNT( 1 ) == 0 )
    {
        
        if ( AI_CHK_ALLIES_STATUS( StatusEffects.Poison ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Posumudi );
            AI_TAR_STATUS( StatusEffects.Poison );
            return;
        }
        else if ( AI_CHK_ALLIES_STATUS( StatusEffects.Panic ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Patra );
            AI_TAR_STATUS( StatusEffects.Panic );
            return;
        }
        else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Matarunda );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Marakunda );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.HitUpDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Masukunda );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ALLY_EFFECT( SpecialEffects.AttackBuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Matarukaja );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ALLY_EFFECT( SpecialEffects.DefenseBuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Marakukaja );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ALLY_EFFECT( SpecialEffects.HitUpBuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Masukukaja );
            AI_TAR_RND();
            return;
        }
        else if ( var123 == var119 )
        {
            AI_ACT_SKILL( BattleSkill.Agi );
            AI_TAR_WEAK( Affinity.Fire );
            return;
        }
        else if ( var123 == var120 )
        {
            AI_ACT_SKILL( BattleSkill.Bufu );
            AI_TAR_WEAK( Affinity.Ice );
            return;
        }
        else if ( var123 == var121 )
        {
            AI_ACT_SKILL( BattleSkill.Zio );
            AI_TAR_WEAK( Affinity.Elec );
            return;
        }
        else if ( var123 == var122 )
        {
            AI_ACT_SKILL( BattleSkill.Garu );
            AI_TAR_WEAK( Affinity.Wind );
            return;
        }
        else if ( var118 > 25 )
        {
            AI_ACT_SKILL( BattleSkill.Agi );
            AI_TAR_RND();
            return;
        }
        else if ( var118 > ( 25 + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufu );
            AI_TAR_RND();
            return;
        }
        else if ( var118 > ( ( 25 + 25 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Zio );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Garu );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var118 < 25 )
    {
        AI_ACT_SKILL( BattleSkill.Maragion );
        AI_TAR_RND();
        return;
    }
    else if ( var118 < ( 25 + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mabufula );
        AI_TAR_RND();
        return;
    }
    else if ( var118 < ( ( 25 + 25 ) + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mazionga );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Magarula );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 201
void AI_TINOHE_AEGIS()
{
    int var125;
    int var126;
    int var127;
    int var128;
    var125 = AI_RND( 100 );
    var126 = AI_RND( 100 );
    var127 = AI_RND( 100 );
    var128 = AI_RND( 100 );
    
    if ( AI_CHK_ONE_MORE() == 1 )
    {
        
        if ( var128 < 70 )
        {
            AI_ACT_SKILL( BattleSkill.Megidola );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mudoon );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        
        if ( var126 < 25 )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }
        else if ( var126 < ( 25 + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var126 < ( ( 25 + 25 ) + 25 ) )
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( FUNCTION_0053( 4 ) == 1 )
    {
        
        if ( var127 < 60 )
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_WEAK( Affinity.Ice );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( FUNCTION_0053( 5 ) == 1 )
    {
        
        if ( var127 < 60 )
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_WEAK( Affinity.Elec );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( FUNCTION_0053( 6 ) == 1 )
    {
        
        if ( var127 < 60 )
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_WEAK( Affinity.Wind );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( FUNCTION_0053( 3 ) == 1 )
    {
        
        if ( var127 < 60 )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_WEAK( Affinity.Fire );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var125 < 20 )
    {
        
        if ( FUNCTION_00B2( 186 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var125 < ( 20 + 20 ) )
    {
        
        if ( FUNCTION_00B2( 186 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Mabufudyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Bufudyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var125 < ( ( 20 + 20 ) + 20 ) )
    {
        
        if ( FUNCTION_00B2( 186 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Maziodyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var125 < ( ( ( 20 + 20 ) + 20 ) + 20 ) )
    {
        
        if ( FUNCTION_00B2( 186 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.MindCharge ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.MindCharge );
        AI_TAR_SELF();
        return;
    }
    else if ( var126 < 25 )
    {
        AI_ACT_SKILL( BattleSkill.Maragidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var126 < ( 25 + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mabufudyne );
        AI_TAR_RND();
        return;
    }
    else if ( var126 < ( ( 25 + 25 ) + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.Maziodyne );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Magarudyne );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 202
void AI_SINKNO_AEGIS()
{
    int var129;
    var129 = AI_RND( 100 );
    
    if ( ( AI_CHK_UNIT_HP_PERCENT( BattleUnit.SlaughterDrive, 30 ) == 1 ) && ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 ) )
    {
        AI_ACT_SKILL( BattleSkill.MindCharge );
        AI_TAR_SELF();
        return;
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Agidyne );
        AI_TAR_RND();
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
        return;
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 1 )
    {
        
        if ( var129 < 30 )
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
            AI_TAR_RND();
            return;
        }
        else if ( var129 < ( 30 + 30 ) )
        {
            
            if ( FUNCTION_0053( 3 ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.Agidyne );
                BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
                AI_TAR_WEAK( Affinity.Fire );
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Agidyne );
                BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var129 < ( ( 30 + 30 ) + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.VileAssault );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.MindCharge );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
            AI_TAR_SELF();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_ALLY_COUNT( 1 ) == 1 )
    {
        FUNCTION_0074( 107 );
        AI_TAR_RND();
        return;
    }

    
    if ( var129 < 30 )
    {
        AI_ACT_SKILL( BattleSkill.Maragidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var129 < ( 30 + 30 ) )
    {
        AI_ACT_SKILL( BattleSkill.Agidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var129 < ( ( 30 + 30 ) + 20 ) )
    {
        AI_ACT_SKILL( BattleSkill.VileAssault );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.MindCharge );
        AI_TAR_SELF();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.Maragidyne );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 203
void AI_SULOUT_AEGIS()
{
    int var130;
    var130 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    
    if ( AI_SELF_HP_PERCENT( 20 ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.LastResort );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
        AI_TAR_RND();
        return;
    }

    
    if ( ( FUNCTION_01DC( 1, 330 ) == 1 ) && ( AI_CHK_ALLY_EFFECT( SpecialEffects.Makarakarn ) == 0 ) )
    {
        AI_ACT_SKILL( 242 );
        AI_TAR_RND();
        return;
    }

    
    if ( var130 < 40 )
    {
        
        if ( ( FUNCTION_0058( 0x80 ) == 0 ) && ( FUNCTION_0058( 40 ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Deathbound );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.TorrentShot );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var130 < ( 40 + 50 ) )
    {
        AI_ACT_SKILL( BattleSkill.TorrentShot );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 204
void AI_AKERON_AEGIS()
{
    int var131;
    int var132;
    int var133;
    var131 = AI_RND( 100 );
    var132 = AI_RND( 100 );
    var133 = AI_RND( 100 );
    
    if ( FUNCTION_0053( 8 ) == 1 )
    {
        AI_ACT_SKILL( 49 );
        AI_TAR_WEAK( Affinity.Light );
        return;
    }
    else if ( FUNCTION_0053( 9 ) == 1 )
    {
        AI_ACT_SKILL( 55 );
        AI_TAR_WEAK( Affinity.Dark );
        return;
    }

    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        
        if ( var132 < 45 )
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }
        else if ( var132 < ( 45 + 10 ) )
        {
            AI_ACT_SKILL( BattleSkill.Megidola );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( var131 < 30 )
    {
        
        if ( var133 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var131 < ( 30 + 30 ) )
    {
        
        if ( var133 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var131 < ( ( 30 + 30 ) + 10 ) )
    {
        
        if ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 0 ) && ( AI_CHK_ENEMIES_STATUS( StatusEffects.Fear ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.Tentarafoo );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var131 < ( ( ( 30 + 30 ) + 10 ) + 10 ) )
    {
        
        if ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Fear ) == 0 ) && ( AI_CHK_ENEMIES_STATUS( StatusEffects.Panic ) == 0 ) )
        {
            AI_ACT_SKILL( BattleSkill.EvilSmile );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Garudyne );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.MindCharge );
        AI_TAR_SELF();
        return;
    }

}


// Procedure Index: 205
void AI_KONKYU_AEGIS()
{
    int var134;
    int var135;
    var134 = AI_RND( 100 );
    var135 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        
        if ( var135 < 35 )
        {
            AI_ACT_SKILL( BattleSkill.VorpalBlade );
            AI_TAR_RND();
            return;
        }
        else if ( var135 < ( 35 + 35 ) )
        {
            AI_ACT_SKILL( BattleSkill.ViciousStrike );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.ArrowRain );
            AI_TAR_RND();
            return;
        }

    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (450) = 5570
    
    if ( ( ( AI_SELF_HP_PERCENT( 75 ) == 1 ) && ( AI_SELF_HP_PERCENT( 50 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 0 ) )
    {
        AI_ACT_SKILL( BattleSkill.PowerCharge );
        AI_TAR_SELF();
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
        return;
    }
    else if ( ( ( AI_SELF_HP_PERCENT( 50 ) == 1 ) && ( AI_SELF_HP_PERCENT( 25 ) == 0 ) ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 ) )
    {
        AI_ACT_SKILL( BattleSkill.PowerCharge );
        AI_TAR_SELF();
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) );
        return;
    }
    else if ( ( AI_SELF_HP_PERCENT( 25 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 450 ) ) == 0 ) )
    {
        AI_ACT_SKILL( BattleSkill.PowerCharge );
        AI_TAR_RND();
        return;
    }

    
    if ( AI_ALLY_COUNT( 1 ) == 0 )
    {
        
        if ( var134 < 20 )
        {
            AI_ACT_SKILL( BattleSkill.BraveBlade );
            AI_TAR_RND();
            return;
        }
        else if ( var134 < ( 20 + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.PrimalForce );
            AI_TAR_RND();
            return;
        }
        else if ( var134 < ( ( 20 + 20 ) + 20 ) )
        {
            AI_ACT_SKILL( BattleSkill.GodsHand );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ENEMY_STATUS( StatusEffects.Poison ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.PoisonArrow );
            AI_DONT_TAR_STATUS( StatusEffects.Poison );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.BraveBlade );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var135 < 35 )
    {
        AI_ACT_SKILL( BattleSkill.VorpalBlade );
        AI_TAR_RND();
        return;
    }
    else if ( var135 < ( 35 + 35 ) )
    {
        AI_ACT_SKILL( BattleSkill.ViciousStrike );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.ArrowRain );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 206
void AI_KAIDEN_AEGIS()
{
    int var136;
    var136 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.TempestSlash );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 0 )
    {
        
        if ( var136 < 70 )
        {
            AI_ACT_SKILL( BattleSkill.TempestSlash );
            AI_TAR_RND();
            return;
        }
        else if ( var136 < ( 70 + 10 ) )
        {
            AI_ACT_SKILL( BattleSkill.PowerCharge );
            AI_TAR_RND();
            return;
        }
        else if ( var136 < ( ( 70 + 10 ) + 10 ) )
        {
            AI_ACT_SKILL( BattleSkill.VorpalBlade );
            AI_TAR_RND();
            return;
        }
        else if ( var136 < ( ( ( 70 + 10 ) + 10 ) + 10 ) )
        {
            AI_ACT_SKILL( BattleSkill.Samsara );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 207
void AI_ONNENM_AEGIS()
{
    int var137;
    var137 = AI_RND( 100 );
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.TempestSlash );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 0 )
    {
        
        if ( var137 < 30 )
        {
            AI_ACT_SKILL( BattleSkill.LifeDrainBoss );
            AI_TAR_RND();
            return;
        }
        else if ( var137 < ( 30 + 10 ) )
        {
            AI_ACT_SKILL( BattleSkill.PowerCharge );
            AI_TAR_RND();
            return;
        }
        else if ( var137 < ( ( 30 + 10 ) + 10 ) )
        {
            AI_ACT_SKILL( BattleSkill.DieforMe );
            AI_TAR_RND();
            return;
        }
        else if ( var137 < ( ( ( 30 + 10 ) + 10 ) + 50 ) )
        {
            AI_ACT_SKILL( BattleSkill.PoisonArrow );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 208
void AI_TENJIN_AEGIS()
{
    
    if ( FUNCTION_0035( 30 ) == 0 )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Revolution ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Revolution );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ALLY_EFFECT( SpecialEffects.AttackBuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Matarukaja );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Marakunda );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( FUNCTION_0035( 30 ) == 1 )
    {
        
        if ( AI_CHK_ALLY_EFFECT( SpecialEffects.Makarakarn ) == 0 )
        {
            AI_ACT_SKILL( 242 );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Mediarama );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WAIT();
        return;
    }

}


// Procedure Index: 209
void AI_HAGURE_AEGIS()
{
    
    if ( FUNCTION_005E( 3 ) == 1 )
    {
        AI_ASK_TO_LEAVE();
        AI_TAR_RND();
        return;
    }
    else if ( FUNCTION_005E( 3 ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.BlackViper );
        AI_TAR_UNKNOWN_013D( 1 );
        return;
    }

}


// Procedure Index: 210
void AI_K_GARDKILL()
{
    
    if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_REFLECT( Affinity.Fire );
        return;
    }
    else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_NULL( Affinity.Fire );
        return;
    }
    else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_ABSORB( Affinity.Fire );
        return;
    }

    FUNCTION_0075();
}


// Procedure Index: 211
void AI_H_GARDKILL()
{
    
    if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.IceBreak );
        AI_TAR_REFLECT( Affinity.Ice );
        return;
    }
    else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.IceBreak );
        AI_TAR_NULL( Affinity.Ice );
        return;
    }
    else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.IceBreak );
        AI_TAR_ABSORB( Affinity.Ice );
        return;
    }

    FUNCTION_0075();
}


// Procedure Index: 212
void AI_D_GARDKILL()
{
    
    if ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.ElecBreak );
        AI_TAR_REFLECT( Affinity.Elec );
        return;
    }
    else if ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.ElecBreak );
        AI_TAR_NULL( Affinity.Elec );
        return;
    }
    else if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.ElecBreak );
        AI_TAR_ABSORB( Affinity.Elec );
        return;
    }

    FUNCTION_0075();
}


// Procedure Index: 213
void AI_S_GARDKILL()
{
    
    if ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.WindBreak );
        AI_TAR_REFLECT( Affinity.Wind );
        return;
    }
    else if ( AI_EN_HAS_NULL( Affinity.Wind ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.WindBreak );
        AI_TAR_NULL( Affinity.Wind );
        return;
    }
    else if ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.WindBreak );
        AI_TAR_ABSORB( Affinity.Wind );
        return;
    }

    FUNCTION_0075();
}


// Procedure Index: 214
void AI_ZAKO_DEKAJYA()
{
    
    if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackBuff ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Dekaja );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseBuff ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Dekaja );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.HitUpBuff ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Dekaja );
        AI_TAR_RND();
        return;
    }

    FUNCTION_0075();
}


// Procedure Index: 215
void AI_ZAKO_DEKNDA()
{
    
    if ( ( AI_CHK_SELF_EFFECT( SpecialEffects.AttackDebuff ) == 1 ) || ( AI_CHK_ALLY_EFFECT( SpecialEffects.AttackDebuff ) == 1 ) )
    {
        AI_ACT_SKILL( BattleSkill.Dekunda );
        AI_TAR_RND();
        return;
    }
    else if ( ( AI_CHK_SELF_EFFECT( SpecialEffects.DefenseDebuff ) == 1 ) || ( AI_CHK_ALLY_EFFECT( SpecialEffects.DefenseDebuff ) == 1 ) )
    {
        AI_ACT_SKILL( BattleSkill.Dekunda );
        AI_TAR_RND();
        return;
    }
    else if ( ( AI_CHK_SELF_EFFECT( SpecialEffects.HitUpDebuff ) == 1 ) || ( AI_CHK_ALLY_EFFECT( SpecialEffects.HitUpDebuff ) == 1 ) )
    {
        AI_ACT_SKILL( BattleSkill.Dekunda );
        AI_TAR_RND();
        return;
    }

    FUNCTION_0075();
}


// Procedure Index: 216
void AI_ZAKO_DEKAJYA_DEKNDA()
{
    
    if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackBuff ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Dekaja );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseBuff ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Dekaja );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.HitUpBuff ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Dekaja );
        AI_TAR_RND();
        return;
    }

    
    if ( ( AI_CHK_SELF_EFFECT( SpecialEffects.AttackDebuff ) == 1 ) || ( AI_CHK_ALLY_EFFECT( SpecialEffects.AttackDebuff ) == 1 ) )
    {
        AI_ACT_SKILL( BattleSkill.Dekunda );
        AI_TAR_RND();
        return;
    }
    else if ( ( AI_CHK_SELF_EFFECT( SpecialEffects.DefenseDebuff ) == 1 ) || ( AI_CHK_ALLY_EFFECT( SpecialEffects.DefenseDebuff ) == 1 ) )
    {
        AI_ACT_SKILL( BattleSkill.Dekunda );
        AI_TAR_RND();
        return;
    }
    else if ( ( AI_CHK_SELF_EFFECT( SpecialEffects.HitUpDebuff ) == 1 ) || ( AI_CHK_ALLY_EFFECT( SpecialEffects.HitUpDebuff ) == 1 ) )
    {
        AI_ACT_SKILL( BattleSkill.Dekunda );
        AI_TAR_RND();
        return;
    }

    FUNCTION_0075();
}


// Procedure Index: 217
void AI_MAYA_GARDKILL()
{
    
    if ( AI_ALLY_COUNT( 1 ) == 1 )
    {
        AI_ASK_TO_LEAVE();
        AI_TAR_RND();
        return;
    }

    
    if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_REFLECT( Affinity.Fire );
        return;
    }
    else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_NULL( Affinity.Fire );
        return;
    }
    else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.FireBreak );
        AI_TAR_ABSORB( Affinity.Fire );
        return;
    }

    
    if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.IceBreak );
        AI_TAR_REFLECT( Affinity.Ice );
        return;
    }
    else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.IceBreak );
        AI_TAR_NULL( Affinity.Ice );
        return;
    }
    else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.IceBreak );
        AI_TAR_ABSORB( Affinity.Ice );
        return;
    }

    FUNCTION_0075();
}


// Procedure Index: 218
void AI_TAIDA_ZAKO()
{
    
    if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackDebuff ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.Matarunda );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.Marakunda );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.HitUpDebuff ) == 0 )
    {
        AI_ACT_SKILL( BattleSkill.Masukunda );
        AI_TAR_RND();
        return;
    }

    FUNCTION_0075();
}


// Procedure Index: 219
void test()
{
}


// Procedure Index: 220
void kakunin()
{
}


// Procedure Index: 221
void AI_metis()
{
    int var138;
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    
    if ( FUNCTION_0158( 1, 50 ) == 1 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
    }
    else 
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
    }

    var138 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 1 )
    {
        AI_WAIT_CUSTOM( 222 );
        return;
    }
    else if ( var138 < 50 )
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }
    else if ( var138 < ( ( 50 + 50 ) + 25 ) )
    {
        AI_ACT_SKILL( BattleSkill.FatalEnd );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.MightySwing );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 222
void AI_Erebos()
{
    int var139;
    var139 = 0;
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (511) = 5631
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (511) = 5631
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 511 ) ) == 1 )
    {
        var139 = FUNCTION_0192( 2 );
        var139 = ( var139 + 1 );
        FUNCTION_0193( 2, var139 );
        
        if ( var139 < 3 )
        {
            AI_AFFINITY_SWITCH( BattleUnit.ErebusResistPhys );
            BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 511 ) );
            AI_WAIT_CUSTOM( 226 );
            return;
        }
        else 
        {
            FUNCTION_0193( 2, 0 );
        }

    }
    else 
    {
        FUNCTION_0193( 2, 0 );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (453) = 5573
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (454) = 5574
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (452) = 5572
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (452) = 5572
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (453) = 5573
    
    if ( FUNCTION_0176() == 1 )
    {
        
        if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 453 ) ) == 1 )
        {
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 454 ) );
        }

        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 452 ) );
        AI_AFFINITY_SWITCH( BattleUnit.ErebusStunned );
        AI_Erebos_B();
    }
    else if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 452 ) ) == 1 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 453 ) );
    }

    AI_AFFINITY_SWITCH( BattleUnit.ErebusResistMagic );
    AI_Erebos_A();
}


// Procedure Index: 223
void AI_Erebos_A()
{
    int var140;
    int var141;
    FUNCTION_0193( 1, 0 );
    var140 = AI_RND( 100 );
    var141 = FUNCTION_0192( 0 );
    var141 = ( var141 + 1 );
    FUNCTION_0193( 0, var141 );
    
    if ( var141 > 4 )
    {
        FUNCTION_0193( 0, 0 );
        FUNCTION_0175( 1200 );
        AI_TAR_SELF();
        AI_AFFINITY_SWITCH( BattleUnit.ErebusStunned );
        return;
    }

    
    if ( var140 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.AlmightyAttack );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_TUJYOU();
    }

}


// Procedure Index: 224
void AI_Erebos_B()
{
    int var142;
    int var143;
    FUNCTION_0193( 0, 0 );
    var142 = AI_RND( 100 );
    var143 = FUNCTION_0192( 1 );
    var143 = ( var143 + 1 );
    FUNCTION_0193( 1, var143 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (502) = 5622
    
    if ( var143 == 3 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
    }
    else 
    {
        BIT_OFF( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 502 ) );
    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (498) = 5618
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (499) = 5619
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (448) = 5568
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (506) = 5626
    
    if ( var143 > 3 )
    {
        
        if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 0 )
        {
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 498 ) );
            FUNCTION_0193( 1, 0 );
            AI_AFFINITY_SWITCH( BattleUnit.ErebusResistMagic );
            AI_ACT_SKILL( BattleSkill.PrimalDarkness293 );
            AI_TAR_RND();
            return;
        }
        else if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 ) )
        {
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) );
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 499 ) );
            FUNCTION_0193( 1, 0 );
            AI_AFFINITY_SWITCH( BattleUnit.ErebusResistMagic );
            AI_ACT_SKILL( BattleSkill.PrimalDarkness295 );
            AI_TAR_RND();
            return;
        }
        else if ( ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 448 ) ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 1 ) )
        {
            BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 506 ) );
            FUNCTION_0193( 1, 0 );
            AI_AFFINITY_SWITCH( BattleUnit.ErebusResistMagic );
            AI_ACT_SKILL( BattleSkill.PrimalDarkness296 );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( ( ( AI_CHK_ENEMY_STATUS( StatusEffects.Despair ) == 1 ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 1 ) ) || ( AI_CHK_ENEMY_STATUS( StatusEffects.Fear ) == 1 ) )
    {
        AI_ACT_SKILL( BattleSkill.AlmightyAttack );
        AI_TAR_RND();
        return;
    }

    
    if ( var142 < 10 )
    {
        AI_ACT_SKILL( BattleSkill.AlmightyAttack );
        AI_TAR_RND();
        return;
    }
    else if ( var142 < 15 )
    {
        AI_ACT_SKILL( BattleSkill.Mahamaon );
        AI_TAR_RND();
        return;
    }
    else if ( var142 < 20 )
    {
        AI_ACT_SKILL( BattleSkill.Mamudoon );
        AI_TAR_RND();
        return;
    }
    else if ( var142 < 30 )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Fear ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.AlmightyAttack );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.EvilSmile );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var142 < 40 )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Despair ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.AlmightyAttack );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.EvilSmile );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var142 < 50 )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Panic ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.AlmightyAttack );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.EvilSmile );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var142 < 60 )
    {
        
        if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Poison ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.AlmightyAttack );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.PoisonMist );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var142 < 70 )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( 8 ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.AlmightyAttack );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Matarunda );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var142 < 80 )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.HitUpDebuff ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.AlmightyAttack );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Masukunda );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var142 < 90 )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.EvasionUpDebuff ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.AlmightyAttack );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Masukunda );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.VirusBreath );
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 225
void AI_TUJYOU()
{
    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        
        if ( AI_RND( 100 ) < 25 )
        {
            AI_ACT_SKILL( BattleSkill.VorpalBlade );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 50 )
        {
            AI_ACT_SKILL( BattleSkill.AkashaArts );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 75 )
        {
            AI_ACT_SKILL( BattleSkill.MyriadArrows );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.AlmightyAttack );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        
        if ( AI_RND( 100 ) < 15 )
        {
            AI_ACT_SKILL( BattleSkill.Ragnarok );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 30 )
        {
            AI_ACT_SKILL( BattleSkill.Niflheim );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 45 )
        {
            AI_ACT_SKILL( BattleSkill.ThunderReign );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 60 )
        {
            AI_ACT_SKILL( BattleSkill.PantaRhei );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.AlmightyAttack );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( AI_SELF_HP_PERCENT( 50 ) == 0 )
    {
        
        if ( AI_RND( 100 ) < 14 )
        {
            
            if ( AI_SELF_HP_PERCENT( 75 ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Agidyne );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Bufudyne );
                AI_TAR_RND();
                return;
            }

        }
        else if ( AI_RND( 100 ) < 28 )
        {
            
            if ( AI_SELF_HP_PERCENT( 75 ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Maragidyne );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Mabufudyne );
                AI_TAR_RND();
                return;
            }

        }
        else if ( AI_RND( 100 ) < 42 )
        {
            
            if ( AI_SELF_HP_PERCENT( 75 ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Ziodyne );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Garudyne );
                AI_TAR_RND();
                return;
            }

        }
        else if ( AI_RND( 100 ) < 56 )
        {
            
            if ( AI_SELF_HP_PERCENT( 75 ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Maziodyne );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Magarudyne );
                AI_TAR_RND();
                return;
            }

        }
        else if ( AI_RND( 100 ) < 70 )
        {
            
            if ( AI_RND( 100 ) < 33 )
            {
                AI_ACT_SKILL( BattleSkill.Deathbound );
                AI_TAR_RND();
                return;
            }
            else if ( AI_RND( 100 ) < 66 )
            {
                AI_ACT_SKILL( BattleSkill.ViciousStrike );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.ArrowRain );
                AI_TAR_RND();
                return;
            }

        }
        else if ( AI_RND( 100 ) < 80 )
        {
            
            if ( AI_SELF_HP_PERCENT( 75 ) == 0 )
            {
                
                if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.FireBreak );
                    AI_TAR_REFLECT( Affinity.Fire );
                    return;
                }
                else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.FireBreak );
                    AI_TAR_NULL( Affinity.Fire );
                    return;
                }
                else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.FireBreak );
                    AI_TAR_ABSORB( Affinity.Fire );
                    return;
                }
                else if ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.ElecBreak );
                    AI_TAR_REFLECT( Affinity.Elec );
                    return;
                }
                else if ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.ElecBreak );
                    AI_TAR_NULL( Affinity.Elec );
                    return;
                }
                else if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.ElecBreak );
                    AI_TAR_ABSORB( Affinity.Elec );
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.AlmightyAttack );
                    AI_TAR_RND();
                    return;
                }

            }
            else if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_REFLECT( Affinity.Ice );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_NULL( Affinity.Ice );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.IceBreak );
                AI_TAR_ABSORB( Affinity.Ice );
                return;
            }
            else if ( AI_EN_HAS_REFLECT( Affinity.Wind ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.WindBreak );
                AI_TAR_REFLECT( Affinity.Wind );
                return;
            }
            else if ( AI_EN_HAS_NULL( Affinity.Wind ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.WindBreak );
                AI_TAR_NULL( Affinity.Wind );
                return;
            }
            else if ( AI_EN_HAS_ABSORB( Affinity.Wind ) == 1 )
            {
                AI_ACT_SKILL( BattleSkill.WindBreak );
                AI_TAR_ABSORB( Affinity.Wind );
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.AlmightyAttack );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.AlmightyAttack );
            AI_TAR_RND();
            return;
        }

    }
    else if ( ( AI_SELF_HP_PERCENT( 50 ) == 1 ) && ( AI_SELF_HP_PERCENT( 25 ) == 0 ) )
    {
        
        if ( AI_RND( 100 ) < 8 )
        {
            AI_ACT_SKILL( BattleSkill.Ragnarok );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 0x10 )
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 24 )
        {
            AI_ACT_SKILL( BattleSkill.Niflheim );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 0x20 )
        {
            AI_ACT_SKILL( BattleSkill.Mabufudyne );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 40 )
        {
            AI_ACT_SKILL( BattleSkill.ThunderReign );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 48 )
        {
            AI_ACT_SKILL( BattleSkill.Maziodyne );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 56 )
        {
            AI_ACT_SKILL( BattleSkill.PantaRhei );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 0x40 )
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 72 )
        {
            AI_ACT_SKILL( BattleSkill.VorpalBlade );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 80 )
        {
            AI_ACT_SKILL( BattleSkill.AkashaArts );
            AI_TAR_RND();
            return;
        }
        else if ( AI_RND( 100 ) < 88 )
        {
            AI_ACT_SKILL( BattleSkill.MyriadArrows );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.AlmightyAttack );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_RND( 100 ) < 8 )
    {
        AI_ACT_SKILL( BattleSkill.Ragnarok );
        AI_TAR_RND();
        return;
    }
    else if ( AI_RND( 100 ) < 0x10 )
    {
        AI_ACT_SKILL( BattleSkill.Maragidyne );
        AI_TAR_RND();
        return;
    }
    else if ( AI_RND( 100 ) < 24 )
    {
        AI_ACT_SKILL( BattleSkill.Niflheim );
        AI_TAR_RND();
        return;
    }
    else if ( AI_RND( 100 ) < 0x20 )
    {
        AI_ACT_SKILL( BattleSkill.Mabufudyne );
        AI_TAR_RND();
        return;
    }
    else if ( AI_RND( 100 ) < 40 )
    {
        AI_ACT_SKILL( BattleSkill.ThunderReign );
        AI_TAR_RND();
        return;
    }
    else if ( AI_RND( 100 ) < 48 )
    {
        AI_ACT_SKILL( BattleSkill.Maziodyne );
        AI_TAR_RND();
        return;
    }
    else if ( AI_RND( 100 ) < 56 )
    {
        AI_ACT_SKILL( BattleSkill.PantaRhei );
        AI_TAR_RND();
        return;
    }
    else if ( AI_RND( 100 ) < 0x40 )
    {
        AI_ACT_SKILL( BattleSkill.Magarudyne );
        AI_TAR_RND();
        return;
    }
    else if ( AI_RND( 100 ) < 72 )
    {
        AI_ACT_SKILL( BattleSkill.VorpalBlade );
        AI_TAR_RND();
        return;
    }
    else if ( AI_RND( 100 ) < 80 )
    {
        AI_ACT_SKILL( BattleSkill.AkashaArts );
        AI_TAR_RND();
        return;
    }
    else if ( AI_RND( 100 ) < 88 )
    {
        AI_ACT_SKILL( BattleSkill.MyriadArrows );
        AI_TAR_RND();
        return;
    }
    else if ( AI_RND( 100 ) < 50 )
    {
        AI_ACT_SKILL( BattleSkill.PowerCharge );
        AI_TAR_SELF();
        return;
    }
    else 
    {
        AI_ACT_SKILL( BattleSkill.MindCharge );
        AI_TAR_SELF();
        return;
    }

}


// Procedure Index: 226
void AI_Shadow_hero()
{
    int var144;
    int var145;
    var144 = FUNCTION_0192( 0 );
    var144 = ( var144 + 1 );
    FUNCTION_0193( 0, var144 );
    
    if ( var144 > 3 )
    {
        FUNCTION_0193( 0, 0 );
        FUNCTION_01DF();
        return;
    }

    var145 = AI_RND( 100 );
    
    if ( FUNCTION_01EC() == 225 )
    {
        AI_Shadow_hero_AIGISU();
    }
    else if ( FUNCTION_01EC() == 224 )
    {
        AI_Shadow_hero_YUKARI();
    }
    else if ( FUNCTION_01EC() == 226 )
    {
        AI_Shadow_hero_MITURU();
    }
    else if ( FUNCTION_01EC() == 227 )
    {
        AI_Shadow_hero_JUNPEI();
    }
    else if ( FUNCTION_01EC() == 228 )
    {
        AI_Shadow_hero_SANADA();
    }
    else if ( FUNCTION_01EC() == 229 )
    {
        AI_Shadow_hero_AMADA();
    }
    else if ( FUNCTION_01EC() == 230 )
    {
        AI_Shadow_hero_KOROMARU();
    }

}


// Procedure Index: 227
void AI_Shadow_hero_AIGISU()
{
    int var146;
    var146 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (455) = 5575
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (455) = 5575
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 455 ) ) == 0 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 455 ) );
        AI_ACT_PERSONA( 225, BattleSkill.GodsHand );
        FUNCTION_0060();
        AI_AFFINITY_SWITCH( BattleUnit.UnknownAthena );
        return;
    }

    
    if ( AI_ENEMY_COUNT( 1 ) == 0 )
    {
        
        if ( var146 < 30 )
        {
            
            if ( AI_CHK_SELF_EFFECT( 81 ) == 0 )
            {
                AI_ACT_PERSONA( 225, 239 );
                AI_TAR_SELF();
                return;
            }
            else 
            {
                AI_ACT_PERSONA( 225, BattleSkill.GodsHand );
                FUNCTION_0060();
                return;
            }

        }
        else if ( var146 < 60 )
        {
            AI_ACT_PERSONA( 225, BattleSkill.GodsHand );
            AI_TAR_RND();
            return;
        }
        else if ( var146 < 90 )
        {
            AI_ACT_PERSONA( 225, BattleSkill.AkashaArts );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( ( ( FUNCTION_015D( 1, 1 ) == 1 ) || ( FUNCTION_015E( 1, 1 ) == 1 ) ) || ( FUNCTION_015F( 1, 1 ) == 1 ) )
    {
        
        if ( var146 < 25 )
        {
            AI_ACT_PERSONA( 225, BattleSkill.BraveBlade );
            AI_TAR_RND();
            return;
        }
        else if ( var146 < 50 )
        {
            AI_ACT_PERSONA( 225, BattleSkill.Garudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var146 < 75 )
        {
            AI_ACT_PERSONA( 225, BattleSkill.VileAssault );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_ENEMIES_EFFECT( 162 ) == 0 )
        {
            AI_ACT_PERSONA( 225, 250 );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_PERSONA( 225, BattleSkill.BraveBlade );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var146 < 30 )
    {
        
        if ( AI_CHK_SELF_EFFECT( 81 ) == 0 )
        {
            AI_ACT_PERSONA( 225, 239 );
            AI_TAR_SELF();
            return;
        }
        else 
        {
            AI_ACT_PERSONA( 225, BattleSkill.GodsHand );
            FUNCTION_0060();
            return;
        }

    }
    else if ( var146 < 60 )
    {
        AI_ACT_PERSONA( 225, BattleSkill.GodsHand );
        AI_TAR_RND();
        return;
    }
    else if ( var146 < 90 )
    {
        AI_ACT_PERSONA( 225, BattleSkill.AkashaArts );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 228
void AI_Shadow_hero_YUKARI()
{
    int var147;
    var147 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (456) = 5576
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (456) = 5576
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 456 ) ) == 0 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 456 ) );
        AI_ACT_PERSONA( 224, BattleSkill.PantaRhei );
        FUNCTION_0060();
        AI_AFFINITY_SWITCH( BattleUnit.UnknownIsis );
        return;
    }

    
    if ( var147 < 25 )
    {
        AI_ACT_PERSONA( 224, BattleSkill.PantaRhei );
        AI_TAR_RND();
        return;
    }
    else if ( var147 < 45 )
    {
        AI_ACT_PERSONA( 224, BattleSkill.Magarudyne );
        AI_TAR_RND();
        return;
    }
    else if ( ( var147 < 65 ) && ( AI_CHK_ENEMIES_STATUS( StatusEffects.Charm ) == 0 ) )
    {
        AI_ACT_PERSONA( 224, 243 );
        AI_TAR_RND();
        return;
    }
    else if ( var147 < 85 )
    {
        
        if ( AI_SELF_HP_PERCENT( 90 ) == 1 )
        {
            AI_ACT_PERSONA( 224, BattleSkill.Diarama );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_PERSONA( 224, BattleSkill.PantaRhei );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 229
void AI_Shadow_hero_MITURU()
{
    int var148;
    var148 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (457) = 5577
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (457) = 5577
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 457 ) ) == 0 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 457 ) );
        AI_ACT_PERSONA( 226, BattleSkill.Niflheim );
        FUNCTION_0060();
        AI_AFFINITY_SWITCH( BattleUnit.UnknownArtemisia );
        return;
    }

    
    if ( var148 < 30 )
    {
        AI_ACT_PERSONA( 226, BattleSkill.Niflheim );
        AI_TAR_RND();
        return;
    }
    else if ( var148 < 50 )
    {
        AI_ACT_PERSONA( 226, BattleSkill.Mabufudyne );
        AI_TAR_RND();
        return;
    }
    else if ( var148 < 70 )
    {
        
        if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
        {
            AI_ACT_PERSONA( 226, BattleSkill.MindCharge );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_PERSONA( 226, BattleSkill.Niflheim );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Panic ) == 0 )
    {
        AI_ACT_PERSONA( 226, 249 );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_STATUS( StatusEffects.Panic );
        return;
    }

}


// Procedure Index: 230
void AI_Shadow_hero_JUNPEI()
{
    int var149;
    var149 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (458) = 5578
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (458) = 5578
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 458 ) ) == 0 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 458 ) );
        AI_ACT_PERSONA( 227, BattleSkill.VorpalBlade );
        FUNCTION_0060();
        AI_AFFINITY_SWITCH( BattleUnit.UnknownTrismegistus );
        return;
    }

    
    if ( var149 < 25 )
    {
        AI_ACT_PERSONA( 227, BattleSkill.VorpalBlade );
        AI_TAR_RND();
        return;
    }
    else if ( var149 < 45 )
    {
        AI_ACT_PERSONA( 227, BattleSkill.Agidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var149 < 65 )
    {
        AI_ACT_PERSONA( 227, BattleSkill.BraveBlade );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackDebuff ) == 0 )
    {
        AI_ACT_PERSONA( 227, BattleSkill.Matarunda );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 231
void AI_Shadow_hero_SANADA()
{
    int var150;
    var150 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (459) = 5579
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (459) = 5579
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 459 ) ) == 0 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 459 ) );
        AI_ACT_PERSONA( 228, BattleSkill.ThunderReign );
        FUNCTION_0060();
        AI_AFFINITY_SWITCH( BattleUnit.UnknownCaesar );
        return;
    }

    
    if ( AI_CHK_ENEMIES_EFFECT( 160 ) == 1 )
    {
        
        if ( var150 < 40 )
        {
            AI_ACT_PERSONA( 228, BattleSkill.ThunderReign );
            AI_TAR_RND();
            return;
        }
        else if ( var150 < 80 )
        {
            AI_ACT_PERSONA( 228, BattleSkill.Maziodyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( var150 < 90 )
    {
        AI_ACT_PERSONA( 228, 248 );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 232
void AI_Shadow_hero_AMADA()
{
    int var151;
    var151 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (460) = 5580
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (460) = 5580
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 460 ) ) == 0 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 460 ) );
        AI_ACT_PERSONA( 229, BattleSkill.Hamaon );
        FUNCTION_0060();
        AI_AFFINITY_SWITCH( BattleUnit.UnknownKalaNemi );
        return;
    }

    
    if ( AI_CHK_ENEMY_STATUS( StatusEffects.Downed ) == 1 )
    {
        AI_ACT_PERSONA( 229, BattleSkill.PrimalForce );
        AI_TAR_STATUS( StatusEffects.Downed );
        return;
    }

    
    if ( var151 < 40 )
    {
        AI_ACT_PERSONA( 229, BattleSkill.Maziodyne );
        AI_TAR_RND();
        return;
    }
    else if ( var151 < 80 )
    {
        AI_ACT_PERSONA( 229, BattleSkill.Hamaon );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_SELF_EFFECT( SpecialEffects.Revolution ) == 0 )
    {
        AI_ACT_PERSONA( 229, 253 );
        AI_TAR_SELF();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 233
void AI_Shadow_hero_KOROMARU()
{
    int var152;
    var152 = AI_RND( 100 );
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (461) = 5581
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (461) = 5581
    
    if ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 461 ) ) == 0 )
    {
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 461 ) );
        AI_ACT_PERSONA( 230, BattleSkill.Mamudoon );
        FUNCTION_0060();
        AI_AFFINITY_SWITCH( BattleUnit.UnknownCerberus );
        return;
    }

    
    if ( var152 < 25 )
    {
        AI_ACT_PERSONA( 230, BattleSkill.Maragidyne );
        AI_TAR_RND();
    }
    else if ( var152 < 55 )
    {
        AI_ACT_PERSONA( 230, BattleSkill.Ragnarok );
        AI_TAR_RND();
    }
    else if ( var152 < 75 )
    {
        AI_ACT_PERSONA( 230, BattleSkill.Mamudoon );
        AI_TAR_RND();
    }
    else if ( AI_CHK_ENEMIES_STATUS( StatusEffects.Despair ) == 0 )
    {
        AI_ACT_PERSONA( 230, 254 );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_STATUS( StatusEffects.Despair );
        return;
    }

}


// Procedure Index: 234
void AI_Shadow_hero_METIS()
{
    AI_ACT_PERSONA( 231, BattleSkill.Zionga );
    AI_TAR_RND();
}


// Procedure Index: 235
void AI_AMADAK_AEGIS()
{
    int var153;
    int var154;
    int var155;
    int var156;
    var153 = AI_RND( 100 );
    var154 = AI_RND( 100 );
    var155 = AI_RND( 100 );
    var156 = AI_RND( 100 );
    
    if ( AI_EN_HAS_REFLECT( Affinity.Elec ) == 1 )
    {
        
        if ( AI_RND( 100 ) < 60 )
        {
            AI_ACT_SKILL( BattleSkill.ElecBreak );
            AI_TAR_REFLECT( Affinity.Elec );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Ziodyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_EN_HAS_NULL( Affinity.Elec ) == 1 )
    {
        
        if ( AI_RND( 100 ) < 70 )
        {
            AI_ACT_SKILL( BattleSkill.ElecBreak );
            AI_TAR_NULL( Affinity.Elec );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Hamaon );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_EN_HAS_ABSORB( Affinity.Elec ) == 1 )
    {
        
        if ( AI_RND( 100 ) < 50 )
        {
            AI_ACT_SKILL( BattleSkill.ElecBreak );
            AI_TAR_ABSORB( Affinity.Elec );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.VileAssault );
            AI_TAR_RND();
            return;
        }

    }

    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    // bit id (((((0) + (1024)) + (2048)) + (1024)) + (1024)) + (449) = 5569
    
    if ( ( AI_CHK_UNIT_HP_PERCENT( BattleUnit.Akihiko, 50 ) == 1 ) && ( BIT_CHK( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) ) == 0 ) )
    {
        AI_ACT_SKILL( BattleSkill.Diarahan );
        AI_TAR_UNIT( BattleUnit.Akihiko );
        BIT_ON( ( ( ( ( ( 0 + 0x0400 ) + 0x0800 ) + 0x0400 ) + 0x0400 ) + 449 ) );
        return;
    }
    else if ( AI_SELF_HP_PERCENT( 50 ) == 0 )
    {
        
        if ( AI_CHK_ENEMY_STATUS( StatusEffects.Downed ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.VileAssault );
            FUNCTION_008C();
            return;
        }
        else if ( AI_CHK_ENEMY_STATUS( StatusEffects.Downed ) == 0 )
        {
            
            if ( AI_CHK_SELF_EFFECT( SpecialEffects.Rebellion ) == 0 )
            {
                
                if ( var153 < 10 )
                {
                    AI_ACT_WEAPON();
                    AI_TAR_RND();
                    return;
                }
                else if ( var153 < ( 10 + 20 ) )
                {
                    AI_ACT_SKILL( BattleSkill.Ziodyne );
                    AI_TAR_RND();
                    return;
                }
                else if ( var153 < ( ( 10 + 20 ) + 20 ) )
                {
                    AI_ACT_SKILL( BattleSkill.Hamaon );
                    AI_TAR_RND();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( 252 );
                    AI_TAR_RND();
                    return;
                }

            }
            else if ( AI_CHK_SELF_EFFECT( SpecialEffects.Rebellion ) == 1 )
            {
                
                if ( var154 < 10 )
                {
                    AI_ACT_WEAPON();
                    AI_TAR_RND();
                    return;
                }
                else if ( var154 < ( 10 + 60 ) )
                {
                    AI_ACT_SKILL( BattleSkill.Ziodyne );
                    AI_TAR_RND();
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.Hamaon );
                    AI_TAR_RND();
                    return;
                }

            }

        }

    }
    else if ( AI_SELF_HP_PERCENT( 50 ) == 1 )
    {
        
        if ( AI_CHK_ENEMY_STATUS( StatusEffects.Downed ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.VileAssault );
            FUNCTION_008C();
            return;
        }
        else if ( AI_CHK_ENEMY_STATUS( StatusEffects.Downed ) == 0 )
        {
            
            if ( AI_CHK_SELF_EFFECT( SpecialEffects.Revolution ) == 0 )
            {
                AI_ACT_SKILL( 253 );
                AI_TAR_RND();
                return;
            }
            else if ( AI_CHK_SELF_EFFECT( SpecialEffects.Revolution ) == 1 )
            {
                
                if ( AI_CHK_ALLY_EFFECT( SpecialEffects.Makarakarn ) == 0 )
                {
                    
                    if ( var155 < 10 )
                    {
                        AI_ACT_WEAPON();
                        AI_TAR_RND();
                        return;
                    }
                    else if ( var155 < ( 10 + 70 ) )
                    {
                        AI_ACT_SKILL( BattleSkill.VileAssault );
                        AI_TAR_RND();
                        return;
                    }
                    else 
                    {
                        AI_ACT_SKILL( 242 );
                        AI_TAR_RND();
                        return;
                    }

                }
                else if ( AI_CHK_ALLY_EFFECT( SpecialEffects.Makarakarn ) == 1 )
                {
                    
                    if ( var156 < 10 )
                    {
                        AI_ACT_WEAPON();
                        AI_TAR_RND();
                        return;
                    }
                    else 
                    {
                        AI_ACT_SKILL( BattleSkill.VileAssault );
                        AI_TAR_RND();
                        return;
                    }

                }

            }

        }

    }
    else 
    {
        AI_ACT_WAIT();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 236
void AI_SANADA_AEGIS()
{
    int var157;
    int var158;
    int var159;
    int var160;
    var157 = AI_RND( 100 );
    var158 = AI_RND( 100 );
    var159 = AI_RND( 100 );
    var160 = AI_RND( 100 );
    
    if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Tetrakarn ) == 1 )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Makarakarn ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.Megidolaon );
            AI_TAR_RND();
            return;
        }
        else if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.MindCharge );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Makarakarn ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.PowerCharge );
        AI_TAR_RND();
        return;
    }

    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Ziodyne );
        STAND();
        return;
    }
    else if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.GiganticFist );
        STAND();
        return;
    }

    
    if ( AI_SELF_HP_PERCENT( 50 ) == 0 )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( 34 ) == 0 )
        {
            
            if ( var157 < 10 )
            {
                AI_ACT_WEAPON();
                STAND();
                return;
            }
            else if ( var157 < ( 10 + 40 ) )
            {
                AI_ACT_SKILL( BattleSkill.GiganticFist );
                STAND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( 248 );
                AI_TAR_RND();
                return;
            }

        }
        else if ( AI_CHK_ENEMIES_EFFECT( 34 ) == 1 )
        {
            
            if ( var158 < 20 )
            {
                AI_ACT_WEAPON();
                STAND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.GiganticFist );
                STAND();
                return;
            }

        }

    }
    else if ( AI_SELF_HP_PERCENT( 50 ) == 1 )
    {
        
        if ( FUNCTION_0158( 236, 30 ) == 0 )
        {
            
            if ( var159 < 20 )
            {
                AI_ACT_WEAPON();
                STAND();
                return;
            }
            else if ( var159 < ( 20 + 40 ) )
            {
                AI_ACT_SKILL( BattleSkill.PowerCharge );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_RND();
                return;
            }

        }
        else if ( FUNCTION_0158( 236, 30 ) == 1 )
        {
            
            if ( var160 < 10 )
            {
                AI_ACT_WEAPON();
                STAND();
                return;
            }
            else if ( var160 < ( 10 + 20 ) )
            {
                AI_ACT_SKILL( BattleSkill.PowerCharge );
                AI_TAR_RND();
                return;
            }
            else if ( var160 < ( ( 10 + 20 ) + 20 ) )
            {
                AI_ACT_SKILL( BattleSkill.MindCharge );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.Diarama );
                AI_TAR_UNIT( BattleUnit.Ken );
                return;
            }

        }

    }
    else 
    {
        AI_ACT_WAIT();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 237
void AI_Junpei()
{
    int var161;
    var161 = AI_RND( 100 );
    
    if ( AI_CHK_ALLIES_STATUS( StatusEffects.Panic ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Patra );
        AI_TAR_STATUS( StatusEffects.Panic );
        return;
    }
    else if ( AI_CHK_ALLIES_STATUS( StatusEffects.Despair ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Patra );
        AI_TAR_STATUS( StatusEffects.Despair );
        return;
    }

    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.PowerCharge ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.VorpalBlade );
        AI_TAR_RND();
        return;
    }

    
    if ( var161 < 13 )
    {
        AI_ACT_SKILL( BattleSkill.Agidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var161 < ( 13 + 13 ) )
    {
        AI_ACT_SKILL( BattleSkill.Maragidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var161 < ( ( 13 + 13 ) + 13 ) )
    {
        AI_ACT_SKILL( BattleSkill.VorpalBlade );
        AI_TAR_RND();
        return;
    }
    else if ( var161 < ( ( ( 13 + 13 ) + 13 ) + 13 ) )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AttackDebuff ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Matarunda );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var161 < ( ( ( ( 13 + 13 ) + 13 ) + 13 ) + 12 ) )
    {
        
        if ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.Tentarafoo );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var161 < ( ( ( ( ( 13 + 13 ) + 13 ) + 13 ) + 12 ) + 13 ) )
    {
        
        if ( AI_EN_HAS_REFLECT( Affinity.Fire ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.FireBreak );
            AI_TAR_REFLECT( Affinity.Fire );
            return;
        }
        else if ( AI_EN_HAS_NULL( Affinity.Fire ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.FireBreak );
            AI_TAR_NULL( Affinity.Fire );
            return;
        }
        else if ( AI_EN_HAS_ABSORB( Affinity.Fire ) == 1 )
        {
            AI_ACT_SKILL( BattleSkill.FireBreak );
            AI_TAR_ABSORB( Affinity.Fire );
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.PowerCharge );
            AI_TAR_SELF();
            return;
        }

    }
    else if ( var161 < ( ( ( ( ( ( 13 + 13 ) + 13 ) + 13 ) + 12 ) + 13 ) + 13 ) )
    {
        AI_ACT_SKILL( BattleSkill.TempestSlash );
        AI_TAR_RND();
        return;
    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 238
void AI_Koromaru()
{
    int var162;
    int var163;
    var162 = AI_RND( 100 );
    var163 = AI_RND( 100 );
    
    if ( AI_CHK_ALLIES_STATUS( StatusEffects.Charm ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Charmdi );
        AI_TAR_STATUS( StatusEffects.Charm );
        return;
    }

    
    if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        
        if ( var163 < 50 )
        {
            AI_ACT_SKILL( BattleSkill.Agidyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Maragidyne );
            AI_TAR_RND();
            return;
        }

    }

    
    if ( var162 < 12 )
    {
        AI_ACT_SKILL( BattleSkill.Agidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var162 < ( 12 + 11 ) )
    {
        AI_ACT_SKILL( BattleSkill.Maragidyne );
        AI_TAR_RND();
        return;
    }
    else if ( var162 < ( ( 12 + 11 ) + 11 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mudoon );
        AI_TAR_RND();
        return;
    }
    else if ( var162 < ( ( ( 12 + 11 ) + 11 ) + 11 ) )
    {
        AI_ACT_SKILL( BattleSkill.Mamudoon );
        AI_TAR_RND();
        return;
    }
    else if ( var162 < ( ( ( ( 12 + 11 ) + 11 ) + 11 ) + 11 ) )
    {
        
        if ( AI_CHK_ENEMY_STATUS( StatusEffects.Fear ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.EvilSmile );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.GhastlyWail );
            AI_TAR_RND();
            return;
        }

    }
    else if ( var162 < ( ( ( ( ( 12 + 11 ) + 11 ) + 11 ) + 11 ) + 11 ) )
    {
        AI_ACT_SKILL( BattleSkill.BraveBlade );
        AI_TAR_RND();
        return;
    }
    else if ( var162 < ( ( ( ( ( ( 12 + 11 ) + 11 ) + 11 ) + 11 ) + 11 ) + 11 ) )
    {
        
        if ( FUNCTION_0057( 93 ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.LifeDrainBoss );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }

    }
    else if ( var162 < ( ( ( ( ( ( ( 12 + 11 ) + 11 ) + 11 ) + 11 ) + 11 ) + 11 ) + 11 ) )
    {
        
        if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.AilmentSusceptibility ) == 0 )
        {
            AI_ACT_SKILL( BattleSkill.StagnantAir );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.EvilSmile );
            AI_TAR_RND();
            return;
        }

    }
    else 
    {
        AI_ACT_WEAPON();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 239
void AI_YUKARI_AEGIS()
{
    int var164;
    int var165;
    var164 = AI_RND( 100 );
    var165 = AI_RND( 100 );
    
    if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Makarakarn ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Megidolaon );
        AI_TAR_RND();
        return;
    }
    else if ( AI_SELF_HP_PERCENT( 50 ) == 0 )
    {
        
        if ( var164 < 33 )
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }
        else if ( var164 < ( 33 + 33 ) )
        {
            AI_ACT_SKILL( BattleSkill.MyriadArrows );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 50 ) == 1 )
    {
        
        if ( var165 < 30 )
        {
            AI_ACT_SKILL( BattleSkill.Magarudyne );
            AI_TAR_RND();
            return;
        }
        else if ( var165 < ( 30 + 30 ) )
        {
            AI_ACT_SKILL( BattleSkill.PrimalForce );
            AI_TAR_RND();
            return;
        }
        else if ( var165 < ( ( 30 + 30 ) + 20 ) )
        {
            
            if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Marakunda );
                AI_TAR_RND();
                return;
            }
            else if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.DefenseDebuff ) == 1 )
            {
                
                if ( AI_EN_HAS_REFLECT( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_REFLECT( Affinity.Ice );
                    return;
                }
                else if ( AI_EN_HAS_NULL( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_NULL( Affinity.Ice );
                    return;
                }
                else if ( AI_EN_HAS_ABSORB( Affinity.Ice ) == 1 )
                {
                    AI_ACT_SKILL( BattleSkill.IceBreak );
                    AI_TAR_ABSORB( Affinity.Ice );
                    return;
                }
                else 
                {
                    AI_ACT_SKILL( BattleSkill.PrimalForce );
                    AI_TAR_RND();
                    return;
                }

            }

        }
        else if ( var165 < ( ( ( 30 + 30 ) + 20 ) + 20 ) )
        {
            
            if ( AI_CHK_ALLY_EFFECT( SpecialEffects.AttackBuff ) == 0 )
            {
                AI_ACT_SKILL( BattleSkill.Matarukaja );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.PrimalForce );
                AI_TAR_RND();
                return;
            }

        }

    }
    else 
    {
        AI_ACT_WAIT();
        AI_TAR_RND();
        return;
    }

}


// Procedure Index: 240
void AI_MIRURU_AEGIS()
{
    int var166;
    int var167;
    var166 = AI_RND( 100 );
    var167 = AI_RND( 100 );
    
    if ( AI_CHK_ENEMIES_EFFECT( SpecialEffects.Makarakarn ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Megidolaon );
        AI_TAR_RND();
        return;
    }
    else if ( AI_CHK_SELF_EFFECT( SpecialEffects.MindCharge ) == 1 )
    {
        AI_ACT_SKILL( BattleSkill.Mabufudyne );
        AI_TAR_RND();
        return;
    }
    else if ( AI_SELF_HP_PERCENT( 50 ) == 0 )
    {
        
        if ( var166 < 20 )
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }
        else if ( var166 < ( 20 + 20 ) )
        {
            
            if ( AI_CHK_ENEMY_STATUS( StatusEffects.Charm ) == 0 )
            {
                AI_ACT_SKILL( 243 );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.VorpalBlade );
                AI_TAR_RND();
                return;
            }

        }
        else if ( var166 < ( ( 20 + 20 ) + 20 ) )
        {
            
            if ( AI_CHK_ENEMY_STATUS( StatusEffects.Panic ) == 0 )
            {
                AI_ACT_SKILL( 249 );
                AI_TAR_RND();
                return;
            }
            else 
            {
                AI_ACT_SKILL( BattleSkill.VorpalBlade );
                AI_TAR_RND();
                return;
            }

        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.VorpalBlade );
            AI_TAR_RND();
            return;
        }

    }
    else if ( AI_SELF_HP_PERCENT( 50 ) == 1 )
    {
        
        if ( var167 < 10 )
        {
            AI_ACT_WEAPON();
            AI_TAR_RND();
            return;
        }
        else if ( var167 < ( 10 + 40 ) )
        {
            AI_ACT_SKILL( BattleSkill.MindCharge );
            AI_TAR_RND();
            return;
        }
        else if ( var167 < ( ( 10 + 40 ) + 40 ) )
        {
            AI_ACT_SKILL( BattleSkill.Mabufudyne );
            AI_TAR_RND();
            return;
        }
        else 
        {
            AI_ACT_SKILL( BattleSkill.VorpalBlade );
            AI_TAR_RND();
            return;
        }

    }

}

